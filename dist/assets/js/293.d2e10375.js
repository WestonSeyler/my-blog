(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{730:function(s,e,n){"use strict";n.r(e);var r=n(30),a=Object(r.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("翻译自原文："),n("a",{attrs:{href:"https://netbasal.com/whats-new-in-rxjs-v6-5-d0d74a6752ac",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://netbasal.com/whats-new-in-rxjs-v6-5-d0d74a6752ac"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("RxJS 已于上月2019.4.23发布。\n来看下带来了哪些新功能")]),s._v(" "),n("h4",{attrs:{id:"new-fetch-observable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#new-fetch-observable"}},[s._v("#")]),s._v(" New Fetch Observable")]),s._v(" "),n("p",[s._v("基于原生的 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noopener noreferrer"}},[s._v("fetch"),n("OutboundLink")],1),s._v(" API，RxJS 进行了封装并提供了 fromFetch 方法，也就是利用原生的fetch发http请求并返回为Observable 类型。而且还支持通过基于原生的"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FetchController",target:"_blank",rel:"noopener noreferrer"}},[s._v("FetchController"),n("OutboundLink")],1),s._v(" 实现取消发送中的请求。")]),s._v(" "),n("p",[s._v("在线例子："),n("a",{attrs:{href:"https://stackblitz.com/edit/fromfetch",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://stackblitz.com/edit/fromfetch"),n("OutboundLink")],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { of } from 'rxjs';\nimport { switchMap, catchError } from 'rxjs/operators';\nimport { fromFetch } from 'rxjs/fetch';\n\nconst users$ = fromFetch('https://reqres.in/api/users').pipe(\n  switchMap(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      return of({ error: true, message: `Error ${response.status}` });\n    }\n  }),\n  catchError((error) => of({ error: true, message: error.message }))\n);\n\n\nusers$.subscribe({ next(data) { ... }, complete() { ... } });\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h4",{attrs:{id:"forkjoin-增强"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#forkjoin-增强"}},[s._v("#")]),s._v(" forkJoin 增强")]),s._v(" "),n("p",[s._v("forkJoin 类似 promise.all() 用于同时处理多个 Observable\n在v6.5中可以支持传入对象类型了")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { forkJoin, timer } from 'rxjs';\nimport { take, mapTo } from 'rxjs/operators';\n\nconst source = forkJoin({\n  todos: timer(500).pipe(mapTo([{ title: 'RxJS'}])),\n  user: timer(500).pipe(mapTo({ id: 1 }))\n});\n\nsource.subscribe({\n  next({ todos, user }) { }\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("此外，不再支持 forkJoin(a, b, c, d) 形式，建议传入数组，如 forkJoin([a, b, c, d])。\n译者注： 增强了可读性")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// DEPRECATED \nforkJoin(of(1), of(2)).subscribe();\n\n// use an array instead\nforkJoin([of(1), of(2)]).subscribe();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("在线例子："),n("a",{attrs:{href:"https://stackblitz.com/edit/forkjoin-65",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://stackblitz.com/edit/forkjoin-65"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"partition-observable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#partition-observable"}},[s._v("#")]),s._v(" Partition Observable")]),s._v(" "),n("p",[s._v("Partition 能够将 source observable 分成两个 observables， 一个利用放满足时的预测值，一个是不满足时候的值。")]),s._v(" "),n("p",[s._v("比如页面中，当鼠标点击 h1 标题区域才是我们想要的值，点击其他区域我们依然做处理。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { fromEvent, partition } from 'rxjs';\n\nconst clicks$ = fromEvent(document, 'click');\n\nconst [clicksOnH1$, clicksElsewhere$] =\n  partition(clicks$, event => event.target.tagName === 'H1');\n\n\nclicksOnH1$.subscribe({\n  next() { console.log('clicked on h1') }\n});\n\nclicksElsewhere$\n  .subscribe({\n    next() {\n      console.log('Other clicked')\n    }\n  });\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("在线例子："),n("a",{attrs:{href:"https://stackblitz.com/edit/partition-65",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://stackblitz.com/edit/partition-65"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"combinelatest-被废弃"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#combinelatest-被废弃"}},[s._v("#")]),s._v(" combineLatest 被废弃")]),s._v(" "),n("p",[s._v("combineLatest 目前只会保留 "),n("code",[s._v("combineLatest([a, b, c])")]),s._v(" 这一种使用方法，原因可以看 "),n("a",{attrs:{href:"https://github.com/reactivex/rxjs/commit/6661c79",target:"_blank",rel:"noopener noreferrer"}},[s._v("这里"),n("OutboundLink")],1),s._v(".")]),s._v(" "),n("h3",{attrs:{id:"schedulers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#schedulers"}},[s._v("#")]),s._v(" Schedulers")]),s._v(" "),n("p",[s._v("添加 scheduled 函数来创建 a scheduled observable of values。from、range等其他方法被废弃")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import { of, scheduled, asapScheduler } from 'rxjs';\n\nconsole.log(1);\n\n// DEPRECATED\n// of(2, asapScheduler).subscribe({\n//   next(value) {\n//     console.log(value);\n//   }\n// });\n\nscheduled(of(2), asapScheduler).subscribe({\n  next(value) {\n    console.log(value);\n  }\n});\n\nconsole.log(3)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("输出结果是 1 3 2\n在线例子："),n("a",{attrs:{href:"https://stackblitz.com/edit/scheduled65",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://stackblitz.com/edit/scheduled65"),n("OutboundLink")],1)]),s._v(" "),n("blockquote",[n("p",[s._v("关于 Schedulers 的使用我会在后续文章中介绍")])])])}),[],!1,null,null,null);e.default=a.exports}}]);