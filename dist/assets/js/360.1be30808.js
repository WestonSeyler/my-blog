(window.webpackJsonp=window.webpackJsonp||[]).push([[360],{799:function(s,n,e){"use strict";e.r(n);var a=e(30),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("这节举几个例子来加强 Subject  的理解")]),s._v(" "),e("h3",{attrs:{id:"例1-理解-subject-的组播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例1-理解-subject-的组播"}},[s._v("#")]),s._v(" 例1 理解 Subject 的组播")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const subject = new rxjs.Subject();\n\n// subject.subscribe 可以理解成 Event.AddListener 注意只是注册不会去执行\n// subscriber 1\nsubject.subscribe((data) => {\n  console.log(data); // 0.24957144215097515 (random number)\n});\n\n// subscriber 2\nsubject.subscribe((data) => {\n  console.log(data); // 0.24957144215097515 (random number)\n});\n\n// 执行每个注册的 Listener\n// 注意 输出的随机数值是一样的\nsubject.next(Math.random());\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("blockquote",[e("p",[s._v("Subject 是一个特殊的对象，即可以是数据生产者也同时是消费者，通过使用 Subject 作为数据消费者，可以使用它们将 Observables  从单播转换为多播。下面是一个例子:")])]),s._v(" "),e("h3",{attrs:{id:"例2-使用-subject-将-observables-从单播转换为多播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例2-使用-subject-将-observables-从单播转换为多播"}},[s._v("#")]),s._v(" 例2 使用 Subject 将 Observables  从单播转换为多播")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const observable = rxjs.Observable\n    .create((observer) => {\n      observer.next(Math.random());\n });\n\nconst subject = new rxjs.Subject();\n\n// subscriber 1\nsubject.subscribe((data) => {\n    console.log(data); // 0.24957144215097515 (random number)\n});\n\n// subscriber 2\nsubject.subscribe((data) => {\n    console.log(data); // 0.24957144215097515 (random number)\n});\n\nobservable.subscribe(subject);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h3",{attrs:{id:"结合-angular-中的例子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结合-angular-中的例子"}},[s._v("#")]),s._v(" 结合 Angular 中的例子")]),s._v(" "),e("h5",{attrs:{id:"例1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例1"}},[s._v("#")]),s._v(" 例1")]),s._v(" "),e("p",[s._v("实现文本框传送输入内容并防抖")]),s._v(" "),e("p",[s._v("部分关键代码, TS 部分")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("nameChange$ = new Subject<string>();\n// val 就是 input 输入的值\nthis.nameChange$.pipe(debounceTime(800)).subscribe(val => {\n   //  交互后台\n   this.service.searchName(val).subscribe(\n    // ....\n   );\n});\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[s._v("模板")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(' <input matInput type="text" placeholder="Search Keyword" name="keyword"\n               (input)="nameChange$.next($event.target.value)" [(ngModel)]="formData.keyword">\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("Subject 实际上就是 Observer Pattern 的实现，他会在内部管理一份 observer 的清单，并在接收到值时遍历这份清单并送出值，所以我们可以直接用 subject 的 next 方法传送值，所有订阅的 observer 就会接收到值了。")]),s._v(" "),e("h5",{attrs:{id:"例2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#例2"}},[s._v("#")]),s._v(" 例2")]),s._v(" "),e("p",[s._v("使用 subject 可以实现局部刷新页面功能，假设有一List列表组件，单击列表中的某按钮弹出Model，操作完Model要刷新List数据。\n我们可以按如下操作：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 第一步 先在 service 文件中定义一个 subject\nexport class ListService {\n  listUpdated$ = new Subject();\n}\n\n// 第二步 在列表组件中 ，组件初始化时把要执行的事件放到 subject 中\n// 非常类似 DOM addEventListener\nexport class ListComponent implements OnInit {\n    ngOnInit() {\n      this.service.listUpdated$.subscribe(() => {\n        this.getListData();\n      });\n    }\n   \n   // 从后台获取数据的方法\n   private getListData() {\n   }\n}\n\n// 第三步 在需要的地方调用定义的subject\nexport class InfoModalComponent implements OnInit {\n  onAddClick(): void {\n    // 重新获取最新数据\n    this.service.listUpdated$.next();\n  }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br")])]),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结：")]),s._v(" "),e("ol",[e("li",[s._v("Subject 是一个特殊的对象，即可以是数据生产者也同时是消费者，通过使用 Subject 作为数据消费者，可以使用它们将 Observables  从单播转换为多播。下面是一个例子:")]),s._v(" "),e("li",[s._v("Subject 很像 EventEmitter，用来维护注册的 Listener， 当对 Subject 调用 subscribe 时，不会执行发送数据，只是在 维护的 Observers 中注册新的 Observer。")])])])}),[],!1,null,null,null);n.default=t.exports}}]);