(window.webpackJsonp=window.webpackJsonp||[]).push([[320],{759:function(e,s,a){"use strict";a.r(s);var n=a(30),t=Object(n.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("原文链接：https://mp.weixin.qq.com/s/Z0jnNJlfOrXHdNDb8CM-ng")]),e._v(" "),a("h2",{attrs:{id:"导读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导读"}},[e._v("#")]),e._v(" 导读")]),e._v(" "),a("p",[e._v("变量和类型是学习"),a("code",[e._v("JavaScript")]),e._v("最先接触到的东西，但是往往看起来最简单的东西往往还隐藏着很多你不了解、或者容易犯错的知识，比如下面几个问题：")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("JavaScript")]),e._v("中的变量在内存中的具体存储形式是什么？")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("0.1+0.2")]),e._v("为什么不等于"),a("code",[e._v("0.3")]),e._v("?发生小数计算错误的具体原因是什么？")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Symbol")]),e._v("的特点，以及实际应用场景是什么？")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("[] == ![]")]),e._v("、"),a("code",[e._v("[undefined] == false")]),e._v("为什么等于"),a("code",[e._v("true")]),e._v("?代码中何时会发生隐式类型转换？转换的规则是什么？")])]),e._v(" "),a("li",[a("p",[e._v("如何精确的判断变量的类型？")])])]),e._v(" "),a("p",[e._v("如果你还不能很好的解答上面的问题，那说明你还没有完全掌握这部分的知识，那么请好好阅读下面的文章吧。")]),e._v(" "),a("p",[e._v("本文从底层原理到实际应用详细介绍了"),a("code",[e._v("JavaScript")]),e._v("中的变量和类型相关知识。")]),e._v(" "),a("h2",{attrs:{id:"一、javascript数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、javascript数据类型"}},[e._v("#")]),e._v(" 一、JavaScript数据类型")]),e._v(" "),a("p",[e._v("ECMAScript标准规定了"),a("code",[e._v("7")]),e._v("种数据类型，其把这"),a("code",[e._v("7")]),e._v("种数据类型又分为两种：原始类型和对象类型。")]),e._v(" "),a("p",[a("strong",[e._v("原始类型")])]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("Null")]),e._v("：只包含一个值："),a("code",[e._v("null")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Undefined")]),e._v("：只包含一个值："),a("code",[e._v("undefined")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Boolean")]),e._v("：包含两个值："),a("code",[e._v("true")]),e._v("和"),a("code",[e._v("false")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Number")]),e._v("：整数或浮点数，还有一些特殊值（"),a("code",[e._v("-Infinity")]),e._v("、"),a("code",[e._v("+Infinity")]),e._v("、"),a("code",[e._v("NaN")]),e._v("）")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("String")]),e._v("：一串表示文本值的字符序列")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Symbol")]),e._v("：一种实例是唯一且不可改变的数据类型")])])]),e._v(" "),a("p",[e._v("(在"),a("code",[e._v("es10")]),e._v("中加入了第七种原始类型"),a("code",[e._v("BigInt")]),e._v("，现已被最新"),a("code",[e._v("Chrome")]),e._v("支持)")]),e._v(" "),a("p",[a("strong",[e._v("对象类型")])]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Object")]),e._v("：自己分一类丝毫不过分，除了常用的"),a("code",[e._v("Object")]),e._v("，"),a("code",[e._v("Array")]),e._v("、"),a("code",[e._v("Function")]),e._v("等都属于特殊的对象")])]),e._v(" "),a("h2",{attrs:{id:"二、为什么区分原始类型和对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么区分原始类型和对象类型"}},[e._v("#")]),e._v(" 二、为什么区分原始类型和对象类型")]),e._v(" "),a("h3",{attrs:{id:"_2-1-不可变性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-不可变性"}},[e._v("#")]),e._v(" 2.1 不可变性")]),e._v(" "),a("p",[e._v("上面所提到的原始类型，在"),a("code",[e._v("ECMAScript")]),e._v("标准中，它们被定义为"),a("code",[e._v("primitive values")]),e._v("，即原始值，代表值本身是不可被改变的。")]),e._v(" "),a("p",[e._v("以字符串为例，我们在调用操作字符串的方法时，没有任何方法是可以直接改变字符串的：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var str = 'ConardLi';\nstr.slice(1);str.substr(1);\nstr.trim(1);\nstr.toLowerCase(1);\nstr[0] = 1;\nconsole.log(str);  \n// ConardLi\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("在上面的代码中我们对"),a("code",[e._v("str")]),e._v("调用了几个方法，无一例外，这些方法都在原字符串的基础上产生了一个新字符串，而非直接去改变"),a("code",[e._v("str")]),e._v("，这就印证了字符串的不可变性。")]),e._v(" "),a("p",[e._v("那么，当我们继续调用下面的代码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("str += '6';\nconsole.log(str);  \n// ConardLi6\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("你会发现，"),a("code",[e._v("str")]),e._v("的值被改变了，这不就打脸了字符串的不可变性么？其实不然，我们从内存上来理解：")]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("JavaScript")]),e._v("中，每一个变量在内存中都需要一个空间来存储。")]),e._v(" "),a("p",[e._v("内存空间又被分为两种，栈内存与堆内存。")]),e._v(" "),a("p",[e._v("栈内存：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("存储的值大小固定")])]),e._v(" "),a("li",[a("p",[e._v("空间较小")])]),e._v(" "),a("li",[a("p",[e._v("可以直接操作其保存的变量，运行效率高")])]),e._v(" "),a("li",[a("p",[e._v("由系统自动分配存储空间")])])]),e._v(" "),a("p",[a("code",[e._v("JavaScript")]),e._v("中的原始类型的值被直接存储在栈中，在变量定义时，栈就为其分配好了内存空间。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-bc1320c29cae77f7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("p",[e._v("由于栈中的内存空间的大小是固定的，那么注定了存储在栈中的变量就是不可变的。")]),e._v(" "),a("p",[e._v("在上面的代码中，我们执行了"),a("code",[e._v("str += '6'")]),e._v("的操作，实际上是在栈中又开辟了一块内存空间用于存储"),a("code",[e._v("'ConardLi6'")]),e._v("，然后将变量"),a("code",[e._v("str")]),e._v("指向这块空间，所以这并不违背"),a("code",[e._v("不可变性的")]),e._v("特点。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-cabe683bdd16f68e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("h3",{attrs:{id:"_2-2-引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-引用类型"}},[e._v("#")]),e._v(" 2.2 引用类型")]),e._v(" "),a("p",[e._v("堆内存：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("存储的值大小不定，可动态调整")])]),e._v(" "),a("li",[a("p",[e._v("空间较大，运行效率低")])]),e._v(" "),a("li",[a("p",[e._v("无法直接操作其内部存储，使用引用地址读取")])]),e._v(" "),a("li",[a("p",[e._v("通过代码进行分配空间")])])]),e._v(" "),a("p",[e._v("相对于上面具有不可变性的原始类型，我习惯把对象称为引用类型，引用类型的值实际存储在堆内存中，它在栈中只存储了一个固定长度的地址，这个地址指向堆内存中的值。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var obj1 = {name:"ConardLi"}\nvar obj2 = {age:18}\nvar obj3 = function(){...}\nvar obj4 = [1,2,3,4,5,6,7,8,9]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-5aefda71ecd07b3e?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("blockquote",[a("p",[e._v("由于内存是有限的，这些变量不可能一直在内存中占用资源，这里推荐下这篇文章JavaScript中的垃圾回收和内存泄漏，这里告诉你"),a("code",[e._v("JavaScript")]),e._v("是如何进行垃圾回收以及可能会发生内存泄漏的一些场景。")])]),e._v(" "),a("p",[e._v("当然，引用类型就不再具有"),a("code",[e._v("不可变性")]),e._v("了，我们可以轻易的改变它们：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('obj1.name = "ConardLi6";obj2.age = 19;obj4.length = 0;console.log(obj1); //{name:"ConardLi6"}console.log(obj2); // {age:19}console.log(obj4); // []\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("以数组为例，它的很多方法都可以改变它自身。")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("pop()")]),e._v(" 删除数组最后一个元素，如果数组为空，则不改变数组，返回undefined，改变原数组，返回被删除的元素")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("push()")]),e._v("向数组末尾添加一个或多个元素，改变原数组，返回新数组的长度")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("shift()")]),e._v("把数组的第一个元素删除，若空数组，不进行任何操作，返回undefined,改变原数组，返回第一个元素的值")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("unshift()")]),e._v("向数组的开头添加一个或多个元素，改变原数组，返回新数组的长度")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("reverse()")]),e._v("颠倒数组中元素的顺序，改变原数组，返回该数组")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("sort()")]),e._v("对数组元素进行排序，改变原数组，返回该数组")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("splice()")]),e._v("从数组中添加/删除项目，改变原数组，返回被删除的元素")])])]),e._v(" "),a("p",[e._v("下面我们通过几个操作来对比一下原始类型和引用类型的区别：")]),e._v(" "),a("h3",{attrs:{id:"_2-3-复制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-复制"}},[e._v("#")]),e._v(" 2.3 复制")]),e._v(" "),a("p",[e._v("当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的，先来看看原始类型：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name = 'ConardLi';\nvar name2 = name;name2 = 'code秘密花园';\nconsole.log(name); \n// ConardLi;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-c994a015cd331cf7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("p",[e._v("内存中有一个变量"),a("code",[e._v("name")]),e._v("，值为"),a("code",[e._v("ConardLi")]),e._v("。我们从变量"),a("code",[e._v("name")]),e._v("复制出一个变量"),a("code",[e._v("name2")]),e._v("，此时在内存中创建了一个块新的空间用于存储"),a("code",[e._v("ConardLi")]),e._v("，虽然两者值是相同的，但是两者指向的内存空间完全不同，这两个变量参与任何操作都互不影响。")]),e._v(" "),a("p",[e._v("复制一个引用类型：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var obj = {name:'ConardLi'};\nvar obj2 = obj;\nobj2.name = 'code秘密花园';\nconsole.log(obj.name); \n// code秘密花园\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-650b33f0096626d9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("p",[e._v("当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的"),a("code",[e._v("obj2")]),e._v("实际上和"),a("code",[e._v("obj")]),e._v("指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会受到影响，这就是为什么会有深拷贝和浅拷贝的原因。")]),e._v(" "),a("h3",{attrs:{id:"_2-4-比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-比较"}},[e._v("#")]),e._v(" 2.4 比较")]),e._v(" "),a("p",[e._v("当我们在对两个变量进行比较时，不同类型的变量的表现是不同的：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-aec290ffc09101b7?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name = 'ConardLi';\nvar name2 = 'ConardLi';\nconsole.log(name === name2); \n// truevar obj = {name:'ConardLi'};\nvar obj2 = {name:'ConardLi'};\nconsole.log(obj === obj2); // false\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("对于原始类型，比较时会直接比较它们的值，如果值相等，即返回"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("对于引用类型，比较时会比较它们的引用地址，虽然两个变量在堆中存储的对象具有的属性值都是相等的，但是它们被存储在了不同的存储空间，因此比较值为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_2-5-值传递和引用传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-值传递和引用传递"}},[e._v("#")]),e._v(" 2.5 值传递和引用传递")]),e._v(" "),a("p",[e._v("借助下面的例子，我们先来看一看什么是值传递，什么是引用传递：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let name = 'ConardLi';\nfunction changeValue(name){  \n   name = 'code秘密花园';\n}\nchangeValue(name);\nconsole.log(name);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("执行上面的代码，如果最终打印出来的"),a("code",[e._v("name")]),e._v("是"),a("code",[e._v("'ConardLi'")]),e._v("，没有改变，说明函数参数传递的是变量的值，即值传递。如果最终打印的是"),a("code",[e._v("'code秘密花园'")]),e._v("，函数内部的操作可以改变传入的变量，那么说明函数参数传递的是引用，即引用传递。")]),e._v(" "),a("p",[e._v("很明显，上面的执行结果是"),a("code",[e._v("'ConardLi'")]),e._v("，即函数参数仅仅是被传入变量复制给了的一个局部变量，改变这个局部变量不会对外部变量产生影响。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let obj = { name:'ConardLi' };\nfunction changeValue(obj){  \n   obj.name = 'code秘密花园';\n}\nchangeValue(obj);\nconsole.log(obj.name); \n// code秘密花园\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("p",[e._v("上面的代码可能让你产生疑惑，是不是参数是引用类型就是引用传递呢？")]),e._v(" "),a("p",[e._v("首先明确一点，"),a("code",[e._v("ECMAScript")]),e._v("中所有的函数的参数都是按值传递的。")]),e._v(" "),a("p",[e._v("同样的，当函数参数是引用类型时，我们同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址而已，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递，下面我们再按一个例子：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let obj = {};\nfunction changeValue(obj){  \n  obj.name = 'ConardLi';  \n  obj = {\n     name:'code秘密花园'\n  };\n}\nchangeValue(obj);\nconsole.log(obj.name); // ConardLi\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br")])]),a("p",[e._v("可见，函数参数传递的并不是变量的"),a("code",[e._v("引用")]),e._v("，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址。所以，再次记住：")]),e._v(" "),a("blockquote",[a("p",[a("code",[e._v("ECMAScript")]),e._v("中所有的函数的参数都是按值传递的。")])]),e._v(" "),a("h2",{attrs:{id:"三、分不清的null和undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、分不清的null和undefined"}},[e._v("#")]),e._v(" 三、分不清的null和undefined")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-19f51a9f1707c589?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("p",[e._v("在原始类型中，有两个类型"),a("code",[e._v("Null")]),e._v("和"),a("code",[e._v("Undefined")]),e._v("，他们都有且仅有一个值，"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("，并且他们都代表无和空，我一般这样区分它们：")]),e._v(" "),a("p",[a("strong",[e._v("null")])]),e._v(" "),a("p",[e._v("表示被赋值过的对象，刻意把一个对象赋值为"),a("code",[e._v("null")]),e._v("，故意表示其为空，不应有值。")]),e._v(" "),a("p",[e._v("所以对象的某个属性值为"),a("code",[e._v("null")]),e._v("是正常的，"),a("code",[e._v("null")]),e._v("转换为数值时值为"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("undefined")])]),e._v(" "),a("p",[e._v("表示“缺少值”，即此处应有一个值，但还没有定义，")]),e._v(" "),a("p",[e._v("如果一个对象的某个属性值为"),a("code",[e._v("undefined")]),e._v("，这是不正常的，如"),a("code",[e._v("obj.name=undefined")]),e._v("，我们不应该这样写，应该直接"),a("code",[e._v("delete obj.name")]),e._v("。")]),e._v(" "),a("p",[a("code",[e._v("undefined")]),e._v("转为数值时为"),a("code",[e._v("NaN")]),e._v("(非数字值的特殊值)")]),e._v(" "),a("p",[a("code",[e._v("JavaScript")]),e._v("是一门动态类型语言，成员除了表示存在的空值外，还有可能根本就不存在（因为存不存在只在运行期才知道），这就是"),a("code",[e._v("undefined")]),e._v("的意义所在。对于"),a("code",[e._v("JAVA")]),e._v("这种强类型语言，如果有"),a("code",[e._v('"undefined"')]),e._v("这种情况，就会直接编译失败，所以在它不需要一个这样的类型。")]),e._v(" "),a("h2",{attrs:{id:"四、不太熟的symbol类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、不太熟的symbol类型"}},[e._v("#")]),e._v(" 四、不太熟的Symbol类型")]),e._v(" "),a("p",[a("code",[e._v("Symbol")]),e._v("类型是"),a("code",[e._v("ES6")]),e._v("中新加入的一种原始类型。")]),e._v(" "),a("blockquote",[a("p",[e._v("每个从Symbol()返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。")])]),e._v(" "),a("p",[e._v("下面来看看"),a("code",[e._v("Symbol")]),e._v("类型具有哪些特性。")]),e._v(" "),a("h3",{attrs:{id:"_4-1-symbol的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-symbol的特性"}},[e._v("#")]),e._v(" 4.1 Symbol的特性")]),e._v(" "),a("p",[a("strong",[e._v("1.独一无二")])]),e._v(" "),a("p",[e._v("直接使用"),a("code",[e._v("Symbol()")]),e._v("创建新的"),a("code",[e._v("symbol")]),e._v("变量，可选用一个字符串用于描述。当参数为对象时，将调用对象的"),a("code",[e._v("toString()")]),e._v("方法。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var sym1 = Symbol();  \n// Symbol() var sym2 = Symbol('ConardLi');  \n// Symbol(ConardLi)var sym3 = Symbol('ConardLi');  \n// Symbol(ConardLi)\nvar sym4 = Symbol({name:'ConardLi'}); \n// Symbol([object Object])console.log(sym2 === sym3);  // false\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("我们用两个相同的字符串创建两个"),a("code",[e._v("Symbol")]),e._v("变量，它们是不相等的，可见每个"),a("code",[e._v("Symbol")]),e._v("变量都是独一无二的。")]),e._v(" "),a("p",[e._v("如果我们想创造两个相等的"),a("code",[e._v("Symbol")]),e._v("变量，可以使用"),a("code",[e._v("Symbol.for(key)")]),e._v("。")]),e._v(" "),a("blockquote",[a("p",[e._v("使用给定的key搜索现有的symbol，如果找到则返回该symbol。否则将使用给定的key在全局symbol注册表中创建一个新的symbol。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var sym1 = Symbol.for('ConardLi');\nvar sym2 = Symbol.for('ConardLi');\nconsole.log(sym1 === sym2); // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[a("strong",[e._v("2.原始类型")])]),e._v(" "),a("p",[e._v("注意是使用"),a("code",[e._v("Symbol()")]),e._v("函数创建"),a("code",[e._v("symbol")]),e._v("变量，并非使用构造函数，使用"),a("code",[e._v("new")]),e._v("操作符会直接报错。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("new Symbol(); // Uncaught TypeError: Symbol is not a constructor\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("我们可以使用"),a("code",[e._v("typeof")]),e._v("运算符判断一个"),a("code",[e._v("Symbol")]),e._v("类型：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typeof Symbol() === 'symbol'typeof Symbol('ConardLi') === 'symbol'\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("3.不可枚举")])]),e._v(" "),a("p",[e._v("当使用"),a("code",[e._v("Symbol")]),e._v("作为对象属性时，可以保证对象不会出现重名属性，调用"),a("code",[e._v("for...in")]),e._v("不能将其枚举出来，另外调用"),a("code",[e._v("Object.getOwnPropertyNames、Object.keys()")]),e._v("也不能获取"),a("code",[e._v("Symbol")]),e._v("属性。")]),e._v(" "),a("blockquote",[a("p",[e._v("可以调用Object.getOwnPropertySymbols()用于专门获取Symbol属性。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var obj = {  \n  name:'ConardLi',  \n  [Symbol('name2')]:'code秘密花园'\n}\nObject.getOwnPropertyNames(obj); // [\"name\"]\nObject.keys(obj); // [\"name\"]\nfor (var i in obj) {   \n  console.log(i); // name\n}\nObject.getOwnPropertySymbols(obj)  // [Symbol(name)]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("h3",{attrs:{id:"_4-2-symbol的应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-symbol的应用场景"}},[e._v("#")]),e._v(" 4.2 Symbol的应用场景")]),e._v(" "),a("p",[e._v("下面是几个"),a("code",[e._v("Symbol")]),e._v("在程序中的应用场景。")]),e._v(" "),a("p",[a("strong",[e._v("应用一：防止XSS")])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("React")]),e._v("的"),a("code",[e._v("ReactElement")]),e._v("对象中，有一个"),a("code",[e._v("$$typeof")]),e._v("属性，它是一个"),a("code",[e._v("Symbol")]),e._v("类型的变量：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var REACT_ELEMENT_TYPE =  \n(typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) \n||  0xeac7;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[a("code",[e._v("ReactElement.isValidElement")]),e._v("函数用来判断一个React组件是否是有效的，下面是它的具体实现。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ReactElement.isValidElement = function (object) {  \n  return typeof object === 'object' && object !== null \n&& object.$$typeof === REACT_ELEMENT_TYPE;\n};\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("可见"),a("code",[e._v("React")]),e._v("渲染时会把没有"),a("code",[e._v("$$typeof")]),e._v("标识，以及规则校验不通过的组件过滤掉。")]),e._v(" "),a("p",[e._v("如果你的服务器有一个漏洞，允许用户存储任意"),a("code",[e._v("JSON")]),e._v("对象， 而客户端代码需要一个字符串，这可能会成为一个问题：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// JSON\nlet expectedTextButGotJSON = {  \n  type: 'div',  \n  props: {    \n    dangerouslySetInnerHTML: {      \n    __html: '/* put your exploit here */'    \n  }, \n },\n};\nlet message = { text: expectedTextButGotJSON };\n<p> {message.text}</p>\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br")])]),a("p",[e._v("而"),a("code",[e._v("JSON")]),e._v("中不能存储"),a("code",[e._v("Symbol")]),e._v("类型的变量，这就是防止"),a("code",[e._v("XSS")]),e._v("的一种手段。")]),e._v(" "),a("p",[a("strong",[e._v("应用二：私有属性")])]),e._v(" "),a("p",[e._v("借助"),a("code",[e._v("Symbol")]),e._v("类型的不可枚举，我们可以在类中模拟私有属性，控制变量读写：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const privateField = Symbol();\nclass myClass {  \nconstructor(){    \n  this[privateField] = 'ConardLi';  \n}  \ngetField(){    \n    return this[privateField];  \n}  \nsetField(val){    \n  this[privateField] = val;  \n  }\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br")])]),a("p",[a("strong",[e._v("应用三：防止属性污染")])]),e._v(" "),a("p",[e._v("在某些情况下，我们可能要为对象添加一个属性，此时就有可能造成属性覆盖，用"),a("code",[e._v("Symbol")]),e._v("作为对象属性可以保证永远不会出现同名属性。")]),e._v(" "),a("p",[e._v("例如下面的场景，我们模拟实现一个"),a("code",[e._v("call")]),e._v("方法：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Function.prototype.myCall  =  function  (context)  {      \n  if  (typeof this  !==  'function')  {        \n    return undefined;  // 用于防止 Function.prototype.myCall() 直接调用      \n  }      \n  context = context || window;      \n  const fn = Symbol();      \n  context[fn] = this;     \n  const args = [...arguments].slice(1);      \n  const result = context[fn](...args);      \n  delete context[fn];     \n  return result;    \n}\n\t\t\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("我们需要在某个对象上临时调用一个方法，又不能造成属性污染，"),a("code",[e._v("Symbol")]),e._v("是一个很好的选择。")]),e._v(" "),a("h2",{attrs:{id:"五、不老实的number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、不老实的number类型"}},[e._v("#")]),e._v(" 五、不老实的Number类型")]),e._v(" "),a("p",[e._v("为什么说"),a("code",[e._v("Number")]),e._v("类型不老实呢，相信大家都多多少少的在开发中遇到过小数计算不精确的问题，比如"),a("code",[e._v("0.1+0.2!==0.3")]),e._v("，下面我们来追本溯源，看看为什么会出现这种现象，以及该如何避免。")]),e._v(" "),a("p",[e._v("下面是我实现的一个简单的函数，用于判断两个小数进行加法运算是否精确：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    function judgeFloat(n, m) {\n      const binaryN = n.toString(2);\n      const binaryM = m.toString(2);\n      console.log(`${n}的二进制是    ${binaryN}`);\n      console.log(`${m}的二进制是    ${binaryM}`);\n      const MN = m + n;\n      const accuracyMN = (m * 100 + n * 100) / 100;\n      const binaryMN = MN.toString(2);\n      const accuracyBinaryMN = accuracyMN.toString(2);\n      console.log(`${n}+${m}的二进制是${binaryMN}`);\n      console.log(`${accuracyMN}的二进制是    ${accuracyBinaryMN}`);\n      console.log(`${n}+${m}的二进制再转成十进制是${to10(binaryMN)}`);\n      console.log(`${accuracyMN}的二进制是再转成十进制是${to10(accuracyBinaryMN)}`);\n      console.log(`${n}+${m}在js中计算是${(to10(binaryMN) === to10(accuracyBinaryMN)) ? '' : '不'}准确的`);\n    }\n    function to10(n) {\n      const pre = (n.split('.')[0] - 0).toString(2);\n      const arr = n.split('.')[1].split('');\n      let i = 0;\n      let result = 0;\n      while (i < arr.length) {\n        result += arr[i] * Math.pow(2, -(i + 1));\n        i++;\n      }\n      return result;\n    }\n    judgeFloat(0.1, 0.2);\n    judgeFloat(0.6, 0.7);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-4cacaaab9ea38a60?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("h3",{attrs:{id:"_5-1-精度丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-精度丢失"}},[e._v("#")]),e._v(" 5.1 精度丢失")]),e._v(" "),a("p",[e._v("计算机中所有的数据都是以"),a("code",[e._v("二进制")]),e._v("存储的，所以在计算时计算机要把数据先转换成"),a("code",[e._v("二进制")]),e._v("进行计算，然后在把计算结果转换成"),a("code",[e._v("十进制")]),e._v("。")]),e._v(" "),a("p",[e._v("由上面的代码不难看出，在计算"),a("code",[e._v("0.1+0.2")]),e._v("时，"),a("code",[e._v("二进制")]),e._v("计算发生了精度丢失，导致再转换成"),a("code",[e._v("十进制")]),e._v("后和预计的结果不符。")]),e._v(" "),a("h3",{attrs:{id:"_5-2-对结果的分析-更多的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-对结果的分析-更多的问题"}},[e._v("#")]),e._v(" 5.2 对结果的分析—更多的问题")]),e._v(" "),a("p",[a("code",[e._v("0.1")]),e._v("和"),a("code",[e._v("0.2")]),e._v("的二进制都是以1100无限循环的小数，下面逐个来看JS帮我们计算所得的结果：")]),e._v(" "),a("p",[a("strong",[e._v("0.1的二进制")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0.0001100110011001100110011001100110011001100110011001101\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("0.2的二进制")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0.001100110011001100110011001100110011001100110011001101\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("理论上讲，由上面的结果相加应该：")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0.0100110011001100110011001100110011001100110011001100111\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("实际JS计算得到的0.1+0.2的二进制")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0.0100110011001100110011001100110011001100110011001101\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("看到这里你可能会产生更多的问题：")]),e._v(" "),a("blockquote",[a("p",[e._v("为什么 js计算出的 0.1的二进制 是这么多位而不是更多位？？？")]),e._v(" "),a("p",[e._v("为什么 js计算的（0.1+0.2）的二进制和我们自己计算的（0.1+0.2）的二进制结果不一样呢？？？")]),e._v(" "),a("p",[e._v("为什么 0.1的二进制 + 0.2的二进制 != 0.3的二进制？？？")])]),e._v(" "),a("h3",{attrs:{id:"_5-3-js对二进制小数的存储方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-js对二进制小数的存储方式"}},[e._v("#")]),e._v(" 5.3 js对二进制小数的存储方式")]),e._v(" "),a("p",[e._v("小数的"),a("code",[e._v("二进制")]),e._v("大多数都是无限循环的，"),a("code",[e._v("JavaScript")]),e._v("是怎么来存储他们的呢？")]),e._v(" "),a("p",[e._v("在ECMAScript®语言规范中可以看到，"),a("code",[e._v("ECMAScript")]),e._v("中的"),a("code",[e._v("Number")]),e._v("类型遵循"),a("code",[e._v("IEEE 754")]),e._v("标准。使用64位固定长度来表示。")]),e._v(" "),a("p",[e._v("事实上有很多语言的数字类型都遵循这个标准，例如"),a("code",[e._v("JAVA")]),e._v(",所以很多语言同样有着上面同样的问题。")]),e._v(" "),a("p",[e._v("所以下次遇到这种问题不要上来就喷"),a("code",[e._v("JavaScript")]),e._v("…")]),e._v(" "),a("p",[e._v("有兴趣可以看看下这个网站http://0.30000000000000004.com/，是的，你没看错，就是http://0.30000000000000004.com/！！！")]),e._v(" "),a("h3",{attrs:{id:"_5-4-ieee-754"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-ieee-754"}},[e._v("#")]),e._v(" 5.4 IEEE 754")]),e._v(" "),a("p",[a("code",[e._v("IEEE754")]),e._v("标准包含一组实数的二进制表示法。它有三部分组成：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("符号位")])]),e._v(" "),a("li",[a("p",[e._v("指数位")])]),e._v(" "),a("li",[a("p",[e._v("尾数位")])])]),e._v(" "),a("p",[e._v("三种精度的浮点数各个部分位数如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-c27871083c821744?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image",title:"image"}})]),e._v(" "),a("figcaption",{staticStyle:{margin:"10px 0px 0px",padding:"0px","max-width":"100%","box-sizing":"border-box","word-wrap":"break-word !important","font-size":"0.7em",color:"rgb(153, 153, 153)","line-height":"inherit","text-align":"center"}},[e._v("image")]),e._v(" "),a("p",[a("code",[e._v("JavaScript")]),e._v("使用的是64位双精度浮点数编码，所以它的"),a("code",[e._v("符号位")]),e._v("占"),a("code",[e._v("1")]),e._v("位，指数位占"),a("code",[e._v("11")]),e._v("位，尾数位占"),a("code",[e._v("52")]),e._v("位。")]),e._v(" "),a("p",[e._v("下面我们在理解下什么是"),a("code",[e._v("符号位")]),e._v("、"),a("code",[e._v("指数位")]),e._v("、"),a("code",[e._v("尾数位")]),e._v("，以"),a("code",[e._v("0.1")]),e._v("为例：")]),e._v(" "),a("p",[e._v("它的二进制为："),a("code",[e._v("0.0001100110011001100...")])]),e._v(" "),a("p",[e._v("为了节省存储空间，在计算机中它是以科学计数法表示的，也就是")]),e._v(" "),a("p",[a("code",[e._v("1.100110011001100...")]),e._v(" X 2-4")]),e._v(" "),a("p",[e._v("如果这里不好理解可以想一下十进制的数：")]),e._v(" "),a("p",[a("code",[e._v("1100")]),e._v("的科学计数法为"),a("code",[e._v("11")]),e._v(" X 102")]),e._v(" "),a("p",[e._v("所以：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-97cb514efa3f24d5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image",title:"image"}})]),e._v(" "),a("figcaption",{staticStyle:{margin:"10px 0px 0px",padding:"0px","max-width":"100%","box-sizing":"border-box","word-wrap":"break-word !important","font-size":"0.7em",color:"rgb(153, 153, 153)","line-height":"inherit","text-align":"center"}},[e._v("image")]),e._v(" "),a("p",[a("code",[e._v("符号位")]),e._v("就是标识正负的，"),a("code",[e._v("1")]),e._v("表示"),a("code",[e._v("负")]),e._v("，"),a("code",[e._v("0")]),e._v("表示"),a("code",[e._v("正")]),e._v("；")]),e._v(" "),a("p",[a("code",[e._v("指数位")]),e._v("存储科学计数法的指数；")]),e._v(" "),a("p",[a("code",[e._v("尾数位")]),e._v("存储科学计数法后的有效数字；")]),e._v(" "),a("p",[e._v("所以我们通常看到的二进制，其实是计算机实际存储的尾数位。")]),e._v(" "),a("h3",{attrs:{id:"_5-5-js中的tostring-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-js中的tostring-2"}},[e._v("#")]),e._v(" 5.5 js中的toString(2)")]),e._v(" "),a("p",[e._v("由于尾数位只能存储"),a("code",[e._v("52")]),e._v("个数字，这就能解释"),a("code",[e._v("toString(2)")]),e._v("的执行结果了：")]),e._v(" "),a("p",[e._v("如果计算机没有存储空间的限制，那么"),a("code",[e._v("0.1")]),e._v("的"),a("code",[e._v("二进制")]),e._v("应该是：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0.00011001100110011001100110011001100110011001100110011001...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("科学计数法尾数位")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.1001100110011001100110011001100110011001100110011001...\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("但是由于限制，有效数字第"),a("code",[e._v("53")]),e._v("位及以后的数字是不能存储的，它遵循，如果是"),a("code",[e._v("1")]),e._v("就向前一位进"),a("code",[e._v("1")]),e._v("，如果是"),a("code",[e._v("0")]),e._v("就舍弃的原则。")]),e._v(" "),a("p",[e._v("0.1的二进制科学计数法第53位是1，所以就有了下面的结果：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("0.0001100110011001100110011001100110011001100110011001101\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("0.2")]),e._v("有着同样的问题，其实正是由于这样的存储，在这里有了精度丢失，导致了"),a("code",[e._v("0.1+0.2!=0.3")]),e._v("。")]),e._v(" "),a("p",[e._v("事实上有着同样精度问题的计算还有很多，我们无法把他们都记下来，所以当程序中有数字计算时，我们最好用工具库来帮助我们解决，下面是两个推荐使用的开源库：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("number-precision")])]),e._v(" "),a("li",[a("p",[e._v("mathjs/")])])]),e._v(" "),a("h3",{attrs:{id:"_5-6-javascript能表示的最大数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-javascript能表示的最大数字"}},[e._v("#")]),e._v(" 5.6 JavaScript能表示的最大数字")]),e._v(" "),a("p",[e._v("由与"),a("code",[e._v("IEEE 754")]),e._v("双精度64位规范的限制：")]),e._v(" "),a("p",[a("code",[e._v("指数位")]),e._v("能表示的最大数字："),a("code",[e._v("1023")]),e._v("(十进制)")]),e._v(" "),a("p",[a("code",[e._v("尾数位")]),e._v("能表达的最大数字即尾数位都位"),a("code",[e._v("1")]),e._v("的情况")]),e._v(" "),a("p",[e._v("所以JavaScript能表示的最大数字即位")]),e._v(" "),a("p",[a("code",[e._v("1.111...")]),e._v("X 21023 这个结果转换成十进制是"),a("code",[e._v("1.7976931348623157e+308")]),e._v(",这个结果即为"),a("code",[e._v("Number.MAX_VALUE")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"_5-7-最大安全数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-最大安全数字"}},[e._v("#")]),e._v(" 5.7 最大安全数字")]),e._v(" "),a("p",[e._v("JavaScript中"),a("code",[e._v("Number.MAX_SAFE_INTEGER")]),e._v("表示最大安全数字,计算结果是"),a("code",[e._v("9007199254740991")]),e._v("，即在这个数范围内不会出现精度丢失（小数除外）,这个数实际上是"),a("code",[e._v("1.111...")]),e._v("X 252。")]),e._v(" "),a("p",[e._v("我们同样可以用一些开源库来处理大整数：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("node-bignum")])]),e._v(" "),a("li",[a("p",[e._v("node-bigint")])])]),e._v(" "),a("p",[e._v("其实官方也考虑到了这个问题，"),a("code",[e._v("bigInt")]),e._v("类型在"),a("code",[e._v("es10")]),e._v("中被提出，现在"),a("code",[e._v("Chrome")]),e._v("中已经可以使用，使用"),a("code",[e._v("bigInt")]),e._v("可以操作超过最大安全数字的数字。")]),e._v(" "),a("h2",{attrs:{id:"六、还有哪些引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、还有哪些引用类型"}},[e._v("#")]),e._v(" 六、还有哪些引用类型")]),e._v(" "),a("blockquote",[a("p",[e._v("在"),a("code",[e._v("ECMAScript")]),e._v("中，引用类型是一种数据结构，用于将数据和功能组织在一起。")])]),e._v(" "),a("p",[e._v("我们通常所说的对象，就是某个特定引用类型的实例。")]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ECMAScript")]),e._v("关于类型的定义中，只给出了"),a("code",[e._v("Object")]),e._v("类型，实际上，我们平时使用的很多引用类型的变量，并不是由"),a("code",[e._v("Object")]),e._v("构造的，但是它们原型链的终点都是"),a("code",[e._v("Object")]),e._v("，这些类型都属于引用类型。")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("Array")]),e._v(" 数组")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Date")]),e._v(" 日期")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("RegExp")]),e._v(" 正则")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Function")]),e._v(" 函数")])])]),e._v(" "),a("h3",{attrs:{id:"_6-1-包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-包装类型"}},[e._v("#")]),e._v(" 6.1 包装类型")]),e._v(" "),a("p",[e._v("为了便于操作基本类型值，"),a("code",[e._v("ECMAScript")]),e._v("还提供了几个特殊的引用类型，他们是基本类型的包装类型：")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("Boolean")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Number")])])]),e._v(" "),a("li",[a("p",[a("code",[e._v("String")])])])]),e._v(" "),a("p",[e._v("注意包装类型和原始类型的区别：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("true === new Boolean(true); // false\n123 === new Number(123); // false\n'ConardLi' === new String('ConardLi'); // false\nconsole.log(typeof new String('ConardLi')); // object\nconsole.log(typeof 'ConardLi'); // string\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("blockquote",[a("p",[e._v("引用类型和包装类型的主要区别就是对象的生存期，使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中，而自基本类型则只存在于一行代码的执行瞬间，然后立即被销毁，这意味着我们不能在运行时为基本类型添加属性和方法。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var name = 'ConardLi'\nname.color = 'red';\nconsole.log(name.color); // undefined\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"_6-2-装箱和拆箱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-装箱和拆箱"}},[e._v("#")]),e._v(" 6.2 装箱和拆箱")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("装箱转换：把基本类型转换为对应的包装类型")])]),e._v(" "),a("li",[a("p",[e._v("拆箱操作：把引用类型转换为基本类型")])])]),e._v(" "),a("p",[e._v("既然原始类型不能扩展属性和方法，那么我们是如何使用原始类型调用方法的呢？")]),e._v(" "),a("p",[e._v("每当我们操作一个基础类型时，后台就会自动创建一个包装类型的对象，从而让我们能够调用一些方法和属性，例如下面的代码：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var name = "ConardLi";\nvar name2 = name.substring(2);\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("实际上发生了以下几个过程：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("创建一个"),a("code",[e._v("String")]),e._v("的包装类型实例")])]),e._v(" "),a("li",[a("p",[e._v("在实例上调用"),a("code",[e._v("substring")]),e._v("方法")])]),e._v(" "),a("li",[a("p",[e._v("销毁实例")])])]),e._v(" "),a("p",[e._v("也就是说，我们使用基本类型调用方法，就会自动进行装箱和拆箱操作，相同的，我们使用"),a("code",[e._v("Number")]),e._v("和"),a("code",[e._v("Boolean")]),e._v("类型时，也会发生这个过程。")]),e._v(" "),a("p",[e._v("从引用类型到基本类型的转换，也就是拆箱的过程中，会遵循"),a("code",[e._v("ECMAScript规范")]),e._v("规定的"),a("code",[e._v("toPrimitive")]),e._v("原则，一般会调用引用类型的"),a("code",[e._v("valueOf")]),e._v("和"),a("code",[e._v("toString")]),e._v("方法，你也可以直接重写"),a("code",[e._v("toPeimitive")]),e._v("方法。一般转换成不同类型的值遵循的原则不同，例如：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("引用类型转换为"),a("code",[e._v("Number")]),e._v("类型，先调用"),a("code",[e._v("valueOf")]),e._v("，再调用"),a("code",[e._v("toString")])])]),e._v(" "),a("li",[a("p",[e._v("引用类型转换为"),a("code",[e._v("String")]),e._v("类型，先调用"),a("code",[e._v("toString")]),e._v("，再调用"),a("code",[e._v("valueOf")])])])]),e._v(" "),a("p",[e._v("若"),a("code",[e._v("valueOf")]),e._v("和"),a("code",[e._v("toString")]),e._v("都不存在，或者没有返回基本类型，则抛出"),a("code",[e._v("TypeError")]),e._v("异常。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const obj = {\n  valueOf: () => { console.log('valueOf'); return 123; },\n  toString: () => { console.log('toString'); return 'ConardLi'; },\n};\nconsole.log(obj - 1);   // valueOf   122\nconsole.log(`${obj}ConardLi`); // toString  ConardLiConardLi\n\nconst obj2 = {\n  [Symbol.toPrimitive]: () => { console.log('toPrimitive'); return 123; },\n};\nconsole.log(obj2 - 1);   // valueOf   122\n\nconst obj3 = {\n  valueOf: () => { console.log('valueOf'); return {}; },\n  toString: () => { console.log('toString'); return {}; },\n};\nconsole.log(obj3 - 1);  \n// valueOf  \n// toString\n// TypeError\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br")])]),a("p",[e._v("除了程序中的自动拆箱和自动装箱，我们还可以手动进行拆箱和装箱操作。我们可以直接调用包装类型的"),a("code",[e._v("valueOf")]),e._v("或"),a("code",[e._v("toString")]),e._v("，实现拆箱操作：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var num = new Number("123");  \nconsole.log( typeof num.valueOf() ); //number\nconsole.log( typeof num.toString() ); //string\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h2",{attrs:{id:"七、类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、类型转换"}},[e._v("#")]),e._v(" 七、类型转换")]),e._v(" "),a("p",[e._v("因为"),a("code",[e._v("JavaScript")]),e._v("是弱类型的语言，所以类型转换发生非常频繁，上面我们说的装箱和拆箱其实就是一种类型转换。")]),e._v(" "),a("p",[e._v("类型转换分为两种，隐式转换即程序自动进行的类型转换，强制转换即我们手动进行的类型转换。")]),e._v(" "),a("p",[e._v("强制转换这里就不再多提及了，下面我们来看看让人头疼的可能发生隐式类型转换的几个场景，以及如何转换：")]),e._v(" "),a("h3",{attrs:{id:"_7-1-类型转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-类型转换规则"}},[e._v("#")]),e._v(" 7.1 类型转换规则")]),e._v(" "),a("p",[e._v("如果发生了隐式转换，那么各种类型互转符合下面的规则：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-9b777cfcd203dfe9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("h3",{attrs:{id:"_7-2-if-语句和逻辑语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-if-语句和逻辑语句"}},[e._v("#")]),e._v(" 7.2 if 语句和逻辑语句")]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("if")]),e._v("语句和逻辑语句中，如果只有单个变量，会先将变量转换为"),a("code",[e._v("Boolean")]),e._v("值，只有下面几种情况会转换成"),a("code",[e._v("false")]),e._v("，其余被转换成"),a("code",[e._v("true")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("null\nundefined\n''\nNaN\n0\nfalse\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h3",{attrs:{id:"_7-3-各种运数学算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-各种运数学算符"}},[e._v("#")]),e._v(" 7.3 各种运数学算符")]),e._v(" "),a("p",[e._v("我们在对各种非"),a("code",[e._v("Number")]),e._v("类型运用数学运算符("),a("code",[e._v("- * /")]),e._v(")时，会先将非"),a("code",[e._v("Number")]),e._v("类型转换为"),a("code",[e._v("Number")]),e._v("类型;")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1 - true // 0\n1 - null //  1\n1 * undefined //  NaN\n2 * ['5'] //  10\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("注意"),a("code",[e._v("+")]),e._v("是个例外，执行"),a("code",[e._v("+")]),e._v("操作符时：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("1.当一侧为"),a("code",[e._v("String")]),e._v("类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。")])]),e._v(" "),a("li",[a("p",[e._v("2.当一侧为"),a("code",[e._v("Number")]),e._v("类型，另一侧为原始类型，则将原始类型转换为"),a("code",[e._v("Number")]),e._v("类型。")])]),e._v(" "),a("li",[a("p",[e._v("3.当一侧为"),a("code",[e._v("Number")]),e._v("类型，另一侧为引用类型，将引用类型和"),a("code",[e._v("Number")]),e._v("类型转换成字符串后拼接。")])])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("123 + '123' // 123123   （规则1）\n123 + null  // 123    （规则2）\n123 + true // 124    （规则2）\n123 + {}  // 123[object Object]    （规则3）\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h3",{attrs:{id:"_7-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4"}},[e._v("#")]),e._v(" 7.4 ==")]),e._v(" "),a("p",[e._v("使用"),a("code",[e._v("==")]),e._v("时，若两侧类型相同，则比较结果和"),a("code",[e._v("===")]),e._v("相同，否则会发生隐式转换，使用"),a("code",[e._v("==")]),e._v("时发生的转换可以分为几种不同的情况（只考虑两侧类型不同）：")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("1.NaN")])])]),e._v(" "),a("p",[a("code",[e._v("NaN")]),e._v("和其他任何类型比较永远返回"),a("code",[e._v("false")]),e._v("(包括和他自己)。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("NaN == NaN // false\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("ul",[a("li",[a("strong",[e._v("2.Boolean")])])]),e._v(" "),a("p",[a("code",[e._v("Boolean")]),e._v("和其他任何类型比较，"),a("code",[e._v("Boolean")]),e._v("首先被转换为"),a("code",[e._v("Number")]),e._v("类型。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("true == 1  // true \ntrue == '2'  // false\ntrue == ['1']  // true\ntrue == ['2']  // false\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("blockquote",[a("p",[e._v("这里注意一个可能会弄混的点："),a("code",[e._v("undefined、null")]),e._v("和"),a("code",[e._v("Boolean")]),e._v("比较，虽然"),a("code",[e._v("undefined、null")]),e._v("和"),a("code",[e._v("false")]),e._v("都很容易被想象成假值，但是他们比较结果是"),a("code",[e._v("false")]),e._v("，原因是"),a("code",[e._v("false")]),e._v("首先被转换成"),a("code",[e._v("0")]),e._v("：")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("undefined == false // false\nnull == false // false\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("ul",[a("li",[a("strong",[e._v("3.String和Number")])])]),e._v(" "),a("p",[a("code",[e._v("String")]),e._v("和"),a("code",[e._v("Number")]),e._v("比较，先将"),a("code",[e._v("String")]),e._v("转换为"),a("code",[e._v("Number")]),e._v("类型。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("123 == '123' // true'' == 0 // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("ul",[a("li",[a("strong",[e._v("4.null和undefined")])])]),e._v(" "),a("p",[a("code",[e._v("null == undefined")]),e._v("比较结果是"),a("code",[e._v("true")]),e._v("，除此之外，"),a("code",[e._v("null、undefined")]),e._v("和其他任何结果的比较值都为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("null == undefined // true\nnull == '' // false\nnull == 0 // false\nnull == false // false\nundefined == '' // false\nundefined == 0 // false\nundefined == false // false\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br")])]),a("ul",[a("li",[a("strong",[e._v("5.原始类型和引用类型")])])]),e._v(" "),a("p",[e._v("当原始类型和引用类型做比较时，对象类型会依照"),a("code",[e._v("ToPrimitive")]),e._v("规则转换为原始类型:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  '[object Object]' == {} // true\n  '1,2,3' == [1, 2, 3] // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("来看看下面这个比较：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[] == ![] // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("code",[e._v("!")]),e._v("的优先级高于"),a("code",[e._v("==")]),e._v("，"),a("code",[e._v("![]")]),e._v("首先会被转换为"),a("code",[e._v("false")]),e._v("，然后根据上面第三点，"),a("code",[e._v("false")]),e._v("转换成"),a("code",[e._v("Number")]),e._v("类型"),a("code",[e._v("0")]),e._v("，左侧"),a("code",[e._v("[]")]),e._v("转换为"),a("code",[e._v("0")]),e._v("，两侧比较相等。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[null] == false // true\n[undefined] == false // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("根据数组的"),a("code",[e._v("ToPrimitive")]),e._v("规则，数组元素为"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("时，该元素被当做空字符串处理，所以"),a("code",[e._v("[null]、[undefined]")]),e._v("都会被转换为"),a("code",[e._v("0")]),e._v("。")]),e._v(" "),a("p",[e._v("所以，说了这么多，推荐使用"),a("code",[e._v("===")]),e._v("来判断两个值是否相等…")]),e._v(" "),a("h3",{attrs:{id:"_7-5-一道有意思的面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-一道有意思的面试题"}},[e._v("#")]),e._v(" 7.5 一道有意思的面试题")]),e._v(" "),a("p",[e._v("一道经典的面试题，如何让："),a("code",[e._v("a == 1 && a == 2 && a == 3")]),e._v("。")]),e._v(" "),a("p",[e._v("根据上面的拆箱转换，以及"),a("code",[e._v("==")]),e._v("的隐式转换，我们可以轻松写出答案：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const a = {\n   value:[3,2,1],\n   valueOf: function () {return this.value.pop(); },\n} \n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h2",{attrs:{id:"八、判断javascript数据类型的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、判断javascript数据类型的方式"}},[e._v("#")]),e._v(" 八、判断JavaScript数据类型的方式")]),e._v(" "),a("h3",{attrs:{id:"_8-1-typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-typeof"}},[e._v("#")]),e._v(" 8.1 typeof")]),e._v(" "),a("p",[a("strong",[e._v("适用场景")])]),e._v(" "),a("p",[a("code",[e._v("typeof")]),e._v("操作符可以准确判断一个变量是否为下面几个原始类型：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typeof 'ConardLi'  // string\ntypeof 123  // number\ntypeof true  // boolean\ntypeof Symbol()  // symbol\ntypeof undefined  // undefined\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("你还可以用它来判断函数类型：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typeof function(){}  // function\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("不适用场景")])]),e._v(" "),a("p",[e._v("当你用"),a("code",[e._v("typeof")]),e._v("来判断引用类型时似乎显得有些乏力了：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("typeof [] // object\ntypeof {} // object\ntypeof new Date() // object\ntypeof /^\\d*$/; // object\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[e._v("除函数外所有的引用类型都会被判定为"),a("code",[e._v("object")]),e._v("。")]),e._v(" "),a("p",[e._v("另外"),a("code",[e._v("typeof null === 'object'")]),e._v("也会让人感到头痛，这是在"),a("code",[e._v("JavaScript")]),e._v("初版就流传下来的"),a("code",[e._v("bug")]),e._v("，后面由于修改会造成大量的兼容问题就一直没有被修复…")]),e._v(" "),a("h3",{attrs:{id:"_8-2-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-instanceof"}},[e._v("#")]),e._v(" 8.2 instanceof")]),e._v(" "),a("p",[a("code",[e._v("instanceof")]),e._v("操作符可以帮助我们判断引用类型具体是什么类型的对象：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[] instanceof Array // true\nnew Date() instanceof Date // true\nnew RegExp() instanceof RegExp // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("我们先来回顾下原型链的几条规则：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("1.所有引用类型都具有对象特性，即可以自由扩展属性")])]),e._v(" "),a("li",[a("p",[e._v("2.所有引用类型都具有一个"),a("code",[e._v("**proto**")]),e._v("（隐式原型）属性，是一个普通对象")])]),e._v(" "),a("li",[a("p",[e._v("3.所有的函数都具有"),a("code",[e._v("prototype")]),e._v("（显式原型）属性，也是一个普通对象")])]),e._v(" "),a("li",[a("p",[e._v("4.所有引用类型"),a("code",[e._v("**proto**")]),e._v("值指向它构造函数的"),a("code",[e._v("prototype")])])]),e._v(" "),a("li",[a("p",[e._v("5.当试图得到一个对象的属性时，如果变量本身没有这个属性，则会去他的"),a("code",[e._v("**proto**")]),e._v("中去找")])])]),e._v(" "),a("p",[a("code",[e._v("[] instanceof Array")]),e._v("实际上是判断"),a("code",[e._v("Foo.prototype")]),e._v("是否在"),a("code",[e._v("[]")]),e._v("的原型链上。")]),e._v(" "),a("p",[e._v("所以，使用"),a("code",[e._v("instanceof")]),e._v("来检测数据类型，不会很准确，这不是它设计的初衷：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[] instanceof Object // truefunction(){}  instanceof Object // true\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("另外，使用"),a("code",[e._v("instanceof")]),e._v("也不能检测基本数据类型，所以"),a("code",[e._v("instanceof")]),e._v("并不是一个很好的选择。")]),e._v(" "),a("h3",{attrs:{id:"_8-3-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-tostring"}},[e._v("#")]),e._v(" 8.3 toString")]),e._v(" "),a("p",[e._v("上面我们在拆箱操作中提到了"),a("code",[e._v("toString")]),e._v("函数，我们可以调用它实现从引用类型的转换。")]),e._v(" "),a("blockquote",[a("p",[e._v("每一个引用类型都有"),a("code",[e._v("toString")]),e._v("方法，默认情况下，"),a("code",[e._v("toString()")]),e._v("方法被每个"),a("code",[e._v("Object")]),e._v("对象继承。如果此方法在自定义对象中未被覆盖，"),a("code",[e._v("toString()")]),e._v(" 返回 "),a("code",[e._v('"[object type]"')]),e._v("，其中"),a("code",[e._v("type")]),e._v("是对象的类型。")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const obj = {};obj.toString() // [object Object]\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("注意，上面提到了"),a("code",[e._v("如果此方法在自定义对象中未被覆盖")]),e._v("，"),a("code",[e._v("toString")]),e._v("才会达到预想的效果，事实上，大部分引用类型比如"),a("code",[e._v("Array、Date、RegExp")]),e._v("等都重写了"),a("code",[e._v("toString")]),e._v("方法。")]),e._v(" "),a("p",[e._v("我们可以直接调用"),a("code",[e._v("Object")]),e._v("原型上未被覆盖的"),a("code",[e._v("toString()")]),e._v("方法，使用"),a("code",[e._v("call")]),e._v("来改变"),a("code",[e._v("this")]),e._v("指向来达到我们想要的效果。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-d253867e43d6bf5b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image"}})]),e._v(" "),a("h3",{attrs:{id:"_8-4-jquery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-4-jquery"}},[e._v("#")]),e._v(" 8.4 jquery")]),e._v(" "),a("p",[e._v("我们来看看"),a("code",[e._v("jquery")]),e._v("源码中如何进行类型判断：")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var class2type = {};\njQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),\nfunction( i, name ) {\n    class2type[ "[object " + name + "]" ] = name.toLowerCase();\n} );\n\ntype: function( obj ) {\n    if ( obj == null ) {\n        return obj + "";\n    }\n    return typeof obj === "object" || typeof obj === "function" ?\n        class2type[Object.prototype.toString.call(obj) ] || "object" :\n        typeof obj;\n}\n\nisFunction: function( obj ) {\n        return jQuery.type(obj) === "function";\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("p",[e._v("原始类型直接使用"),a("code",[e._v("typeof")]),e._v("，引用类型使用"),a("code",[e._v("Object.prototype.toString.call")]),e._v("取得类型，借助一个"),a("code",[e._v("class2type")]),e._v("对象将字符串多余的代码过滤掉，例如"),a("code",[e._v("[object function]")]),e._v("将得到"),a("code",[e._v("array")]),e._v("，然后在后面的类型判断，如"),a("code",[e._v("isFunction")]),e._v("直接可以使用"),a("code",[e._v('jQuery.type(obj) === "function"')]),e._v("这样的判断。")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("http://www.ecma-international.org/ecma-262/9.0/index.html")])]),e._v(" "),a("li",[a("p",[e._v("https://while.dev/articles/explaining-truthy-falsy-null-0-and-undefined-in-typescript/")])]),e._v(" "),a("li",[a("p",[e._v("https://github.com/mqyqingfeng/Blog/issues/28")])]),e._v(" "),a("li",[a("p",[e._v("https://juejin.im/post/5bc5c752f265da0a9a399a62")])]),e._v(" "),a("li",[a("p",[e._v("https://juejin.im/post/5bbda2b36fb9a05cfd27f55e")])]),e._v(" "),a("li",[a("p",[e._v("《JS高级程序设计》")])])]),e._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[e._v("#")]),e._v(" 小结")]),e._v(" "),a("p",[e._v("希望你阅读本篇文章后可以达到以下几点：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("了解"),a("code",[e._v("JavaScript")]),e._v("中的变量在内存中的具体存储形式，可对应实际场景")])]),e._v(" "),a("li",[a("p",[e._v("搞懂小数计算不精确的底层原因")])]),e._v(" "),a("li",[a("p",[e._v("了解可能发生隐式类型转换的场景以及转换原则")])]),e._v(" "),a("li",[a("p",[e._v("掌握判断"),a("code",[e._v("JavaScript")]),e._v("数据类型的方式和底层原理")])])])])}),[],!1,null,null,null);s.default=t.exports}}]);