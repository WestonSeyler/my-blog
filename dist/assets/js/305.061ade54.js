(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{744:function(e,t,r){"use strict";r.r(t);var s=r(30),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"xss-cross-site-scripting"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#xss-cross-site-scripting"}},[e._v("#")]),e._v(" XSS(Cross Site Scripting)")]),e._v(" "),r("p",[e._v("跨站脚本攻击。\n缩写不是CSS，避免与层叠样式表混淆，")]),e._v(" "),r("p",[e._v("攻击手段：\n盗用cookie，获取敏感信息。")]),e._v(" "),r("p",[e._v("最常用的，留言板中输入"),r("code",[e._v("<script>alert1<\/script>")])]),e._v(" "),r("h2",{attrs:{id:"csp-content-security-policy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csp-content-security-policy"}},[e._v("#")]),e._v(" CSP (Content Security Policy)")]),e._v(" "),r("p",[e._v("CSP的主要目标是减少和报告XSS攻击\n可以重新约束内容被下载的域名")]),e._v(" "),r("h2",{attrs:{id:"x-xss-protection"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#x-xss-protection"}},[e._v("#")]),e._v(" X-XSS-Protection")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-XSS-Protection",target:"_blank",rel:"noopener noreferrer"}},[e._v("X-XSS-Protection"),r("OutboundLink")],1),e._v("\n通过浏览器是开启XSS过滤的，比如地址栏中直接输入"),r("code",[e._v("<script>alert(1)<script>")]),e._v("是无效的\n当然PHP中，可以设置"),r("code",[e._v("header('X-XSS-Protection', 0)")]),e._v("关闭保护")]),e._v(" "),r("p",[e._v("例子\n"),r("code",[e._v("<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' https://ajax.googleapis.com; style-src 'self'; img-src 'self' data:\">")])]),e._v(" "),r("p",[e._v("指定脚本的，图片和样式的来源")]),e._v(" "),r("h2",{attrs:{id:"csrf-或-xsrf-cross-site-request-forgery-跨站请求伪造"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#csrf-或-xsrf-cross-site-request-forgery-跨站请求伪造"}},[e._v("#")]),e._v(" CSRF 或 XSRF (Cross Site Request forgery) 跨站请求伪造")]),e._v(" "),r("p",[e._v("XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。")]),e._v(" "),r("p",[e._v("通常情况下，CSRF 攻击是攻击者借助受害者的 Cookie 骗取服务器的信任，在受害者毫不知情的情况下以受害者名义伪造请求发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。")]),e._v(" "),r("h3",{attrs:{id:"防御方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#防御方法"}},[e._v("#")]),e._v(" 防御方法")]),e._v(" "),r("ol",[r("li",[r("p",[e._v("Cookie 的 SameSite 属性用来限制第三方 Cookie，\nSet-Cookie: CookieName=CookieValue; SameSite=Strict;\nStrict：这个规则过于严格，可能造成非常不好的用户体验。比如，当前网页有一个 GitHub 链接，用户点击跳转就不会带有 GitHub 的 Cookie，跳转过去总是未登陆状态。\nLax： Lax 规则稍稍放宽，大多数情况也是不发送第三方 Cookie，但是导航到目标网址的 Get 请求除外。")])]),e._v(" "),r("li",[r("p",[e._v("同源检测\n在 HTTP 协议中，每一个异步请求都会携带两个 Header ，用于标记来源域名：\n"),r("code",[e._v("Origin Header, Referer Header")])])])]),e._v(" "),r("p",[e._v("这两个 Header 在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。\n服务器可以通过解析这两个 Header 中的域名，确定请求的来源域。\n通过校验请求的该字段，我们能知道请求是否是从本站发出的。\n我们可以通过拒绝非本站发出的请求，来避免了 CSRF 攻击。")]),e._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[r("p",[e._v("验证 Referer 或 Origin\n这种方法不是非常可靠，下面两种更常见。")])]),e._v(" "),r("li",[r("p",[e._v("添加token验证\n服务器将 Token 返回到前端，前端可以作为隐藏字段放到表单中，前端发请求时携带这个 Token，服务器验证 Token 是否正确")])]),e._v(" "),r("li",[r("p",[e._v("验证码")])])]),e._v(" "),r("p",[e._v("CSRF 攻击往往是在用户不知情的情况下成功伪造请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求，而且因为 CSRF 攻击无法获取到验证码，因此通常情况下，验证码能够很好地遏制 CSRF 攻击。\n但验证码并不是万能的，因为出于用户体验考虑，不能给网站所有的操作都加上验证码。\n因此，验证码只能作为防御 CSRF 的一种辅助手段，而不能作为最主要的解决方案。")]),e._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/leizongmin/js-xss/blob/master/README.zh.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("根据白名单过滤 HTML(防止 XSS 攻击)"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP")]),e._v(" "),r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000021114673",target:"_blank",rel:"noopener noreferrer"}},[e._v("跨站请求伪造—CSRF"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=o.exports}}]);