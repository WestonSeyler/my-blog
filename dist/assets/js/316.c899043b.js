(window.webpackJsonp=window.webpackJsonp||[]).push([[316],{758:function(s,a,n){"use strict";n.r(a);var e=n(30),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"_1-对象字面量的惰性初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-对象字面量的惰性初始化"}},[s._v("#")]),s._v(" 1.  对象字面量的惰性初始化")]),s._v(" "),n("p",[s._v("在 JavaScript 中，像这样用字面量初始化对象的写法十分常见：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let foo = {};\nfoo.bar = 123;\nfoo.bas = 'Hello World';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("但在 TypeScript 中，同样的写法就会报错：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let foo = {};\nfoo.bar = 123; // Error: Property 'bar' does not exist on type '{}'\nfoo.bas = 'Hello World'; // Error: Property 'bas' does not exist on type '{}'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("这是因为 TypeScript 在解析 "),n("code",[s._v("let foo = {}")]),s._v(" 这段赋值语句时，会进行“类型推断”：它会认为等号左边 "),n("code",[s._v("foo")]),s._v(" 的类型即为等号右边 "),n("code",[s._v("{}")]),s._v(" 的类型。\n由于 "),n("code",[s._v("{}")]),s._v(" 本没有任何属性，因此，像上面那样给 "),n("code",[s._v("foo")]),s._v(" 添加属性时就会报错。")]),s._v(" "),n("p",[s._v("最好的解决方案就是在为变量赋值的同时，添加属性及其对应的值：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let foo = {\n  bar: 123,\n  bas: 'Hello World'\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("快速解决方案")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let foo = {} as any;\nfoo.bar = 123;\nfoo.bas = 'Hello World';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("折中的解决方案\n当然，总是用 any 肯定是不好的，因为这样做其实是在想办法绕开 TypeScript 的类型检查。\n那么，折中的方案就是创建 interface，这样的好处在于：")]),s._v(" "),n("p",[s._v("方便撰写类型文档\nTypeScript 会参与类型检查，确保类型安全\n请看以下的示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface Foo {\n  bar: number;\n  bas: string;\n}\n\nlet foo = {} as Foo;\nfoo.bar = 123;\nfoo.bas = 'Hello World';\n// 使用 interface 可以确保类型安全，比如我们尝试这样做：\nfoo.bar = 'Hello Stranger'; // 错误：你可能把 `bas` 写成了 `bar`，不能为数字类型的属性赋值字符串\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("如果实在不想写interface，为避免"),n("code",[s._v("object.p")]),s._v("找不到属性，可以尝试使用 "),n("code",[s._v("object['p']")]),s._v("即对象的数组取值写法，")]),s._v(" "),n("h3",{attrs:{id:"_2-关于interface"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-关于interface"}},[s._v("#")]),s._v(" 2. 关于interface")]),s._v(" "),n("p",[s._v("TS 中的 interface 接口和 Java，PHP等语言中的接口不太一样。\n在 TS 中接口可以确保类拥有指定的结构。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface LoggerInterface {\n   log(arg: any) : void;\n}\n\nclass Logger implements LoggerInterface {\n  log (arg) {\n      console.log(arg);\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("也可以使用接口来约束对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface Person {\n    name: string;\n    // 只能在对象刚刚创建的时候修改其值\n    readonly age: number;\n    // 可选属性\n    hobby?: string;\n}\n\nlet zhangsan = {} as Person;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("错: "),n("code",[s._v("zhangsan.age = 10;")]),s._v("  age 是只读属性，只能get不能set\n对:  "),n("code",[s._v("let zhangsan = {age: 10} as Person;")])]),s._v(" "),n("p",[s._v("错: "),n("code",[s._v("let zhangsan = {nickname: 'xx'} as Person;")]),s._v("   nickname不属于Person类型。")]),s._v(" "),n("blockquote",[n("p",[s._v("readonly vs const\n最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。")])]),s._v(" "),n("p",[s._v("有时候我们希望一个接口允许有任意的属性，可以使用如下方式：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface Person {\n    name: string;\n    readonly age: number;\n    hobby?: string;\n    [propName: string]: any;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("使用 [propName: string] 定义了任意属性取 string 类型的值。\n需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性：\n所以 "),n("code",[s._v("let zhangsan = { name: 'xx', age: 18, nickname: 'xx'} as Person;")]),s._v(" 不会报错。\n也可以这么写 "),n("code",[s._v("let lisi: Person = { name: 'lisi', age: 20 }")]),s._v("\n这个功能在有些地方很有用，比如一个组件的config对象类型。可允许传入任意名称的属性。当然属性值得是字符串。")]),s._v(" "),n("h3",{attrs:{id:"_3-枚举类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-枚举类型"}},[s._v("#")]),s._v(" 3.  枚举类型")]),s._v(" "),n("p",[s._v("当我们需要定义一组有共同特点的变量，可以使用枚举类型。\n比如我们要实现下面的页面，这个页面有两处地方要实现点击切换视图的效果，一个是包含Ad Creative，Images和Videos分类的Tab，一个是显示方式Grid还是table。\n点击不同的按钮，页面切换不同的效果。")]),s._v(" "),n("blockquote",[n("p",[n("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-9a48948affd06ae0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})])]),s._v(" "),n("blockquote",[n("p",[n("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-10545116200db60e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})])]),s._v(" "),n("p",[s._v("代码实现")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export enum DisplayTab {\n  Creative,\n  Image,\n  Video,\n}\n\nexport enum DisplayMode {\n  Table,\n  Grid,\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("默认下 DisplayTab.Creative 等于 0，即起始从0开始。\n也可以改变起始值")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export enum DisplayTab {\n  Creative = 3,\n  Image, // 4\n  Video,  // 5\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_4-使用泛型提高重用性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用泛型提高重用性"}},[s._v("#")]),s._v(" 4.  使用泛型提高重用性")]),s._v(" "),n("p",[s._v("比如后台的API中返回的格式是规定的")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("{\n  success: true,\n  data: [{id:1, name: 'aa'}, {id:2, name: 'bb'}]\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("刚开始我们可能会这么写，为每一个API的返回定义一种类型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("interface AccountInfo {\n  'id': number;\n  'name': string;\n}\n\n//  success 和 data 具有普遍性，应该进一步封装\ninterface AccountInfoResp {\n  success: boolean;\n  data: AccountInfo;\n}\n\ngetAccountInfo(id) {\n    return this.http.get<AccountInfoResp>(`/api/accounts/info/${id}`);\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("使用泛型进行优化\nT 代表我们传入的类型")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 可以提取到一个result.ts文件\nexport interface Result<T> {\n  success?: boolean;\n  data?: T;\n}\n\ngetAccountInfo(bid) {\n    return this.http.get<Result<AccountInfo>>(`/api/accounts/xhr/info`);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://jkchao.github.io/typescript-book-chinese/",target:"_blank",rel:"noopener noreferrer"}},[s._v("深入理解 TypeScript"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=t.exports}}]);