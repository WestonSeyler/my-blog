(window.webpackJsonp=window.webpackJsonp||[]).push([[358],{795:function(n,s,a){"use strict";a.r(s);var e=a(30),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("学习本节前，建议先看"),a("a",{attrs:{href:"https://www.jianshu.com/p/0c2762368f80",target:"_blank",rel:"noopener noreferrer"}},[n._v("上一节"),a("OutboundLink")],1),n._v("\n实际上这三个以Map结尾的操作符都是简写。\n共同特点：传入一个返回 Observable 的 Function。")]),n._v(" "),a("p",[n._v("switchMap  = map + switchAll\nmergeMap  = map + mergeMap\nconcatMap = map + concatMap")]),n._v(" "),a("p",[n._v("我们可以使用mergeMap优化上节的例子")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("  fromEvent(document.body, 'click')\n    .pipe(\n      map(e => {\n        return interval(1000)\n           .pipe(\n              take(3)\n            )\n      }),\n      mergeAll()\n    )\n    .subscribe(val => console.log(val));\n\n  // 简写\n\n  fromEvent(document.body, 'click')\n    .pipe(\n      mergeMap(e => {\n        return interval(1000)\n          .pipe(\n            take(3)\n          )\n      }),\n    )\n    .subscribe(val => console.log(val));\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br")])]),a("h3",{attrs:{id:"使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[n._v("#")]),n._v(" 使用场景")]),n._v(" "),a("p",[n._v("switchMap: input的搜索框，typehead，当有新的输入舍去之前的请求，switchMap 同一时间只维护一个内部订阅。记忆switch切换新的。\nmergeMap：同时维护多个活动的内部订阅，第二个参数传入数字，可以控制并发数量。如果需要考虑顺序性，concatMap 会是更好的选择。为防止内存泄漏，如果将 observable 映射成内部的定时器或 DOM 事件流。如果仍然想用 mergeMap 的话，应该利用另一个操作符来管理内部订阅的完成，比如 take 或 takeUntil。\nconcatMap：合并observable，前一个内部 observable 完成后才会订阅下一个。")])])}),[],!1,null,null,null);s.default=t.exports}}]);