(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{801:function(s,n,e){"use strict";e.r(n);var a=e(30),r=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("本节会讲到")]),s._v(" "),e("ol",[e("li",[s._v("什么是观察者（Observer）模式及代码实现")]),s._v(" "),e("li",[s._v("什么是 Iterator (迭代器) 模式及代码实现")]),s._v(" "),e("li",[s._v("什么是 Observable")])]),s._v(" "),e("h2",{attrs:{id:"观察者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[s._v("#")]),s._v(" 观察者模式")]),s._v(" "),e("p",[s._v("发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状\n态发生改变时，所有依赖于它的对象都将得到通知。在 JavaScript 开发中，我们一般用事件模型\n来替代传统的发布—订阅模式。")]),s._v(" "),e("h4",{attrs:{id:"现实中的发布-订阅模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#现实中的发布-订阅模式"}},[s._v("#")]),s._v(" 现实中的发布－订阅模式")]),s._v(" "),e("p",[s._v("不论是在程序世界里还是现实生活中，发布—订阅模式的应用都非常之广泛。我们先看一个\n现实中的例子。\n小明最近看上了一套房子，到了售楼处之后才被告知，该楼盘的房子早已售罄。好在售楼MM 告诉小明，不久后还有一些尾盘推出，开发商正在办理相关手续，手续办好后便可以购买。但到底是什么时候，目前还没有人能够知道。 于是小明记下了售楼处的电话，以后每天都会打电话过去询问是不是已经到了购买时间。除了小明，还有小红、小强、小龙也会每天向售楼处咨询这个问题。一个星期过后，售楼 MM 决定辞职，因为厌倦了每天回答 1000 个相同内容的电话。\n当然现实中没有这么笨的销售公司，实际上故事是这样的：小明离开之前，把电话号码留在了售楼处。售楼 MM 答应他，新楼盘一推出就马上发信息通知小明。小红、小强和小龙也是一样，他们的电话号码都被记在售楼处的花名册上，新楼盘推出的时候，售楼 MM 会翻开花名册，遍历上面的电话号码，依次发送一条短信来通知他们。")]),s._v(" "),e("h4",{attrs:{id:"现实中的发布-订阅模式-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#现实中的发布-订阅模式-2"}},[s._v("#")]),s._v(" 现实中的发布－订阅模式")]),s._v(" "),e("p",[s._v("在刚刚的例子中，发送短信通知就是一个典型的发布—订阅模式，小明、小红等购买者都是\n订阅者，他们订阅了房子开售的消息。售楼处作为发布者，会在合适的时候遍历花名册上的电话\n号码，依次给购房者发布消息。\n可以发现，在这个例子中使用发布—订阅模式有着显而易见的优点。")]),s._v(" "),e("ul",[e("li",[s._v("购房者不用再天天给售楼处打电话咨询开售时间，在合适的时间点，售楼处作为发布者会通知这些消息订阅者。")]),s._v(" "),e("li",[s._v("购房者和售楼处之间不再强耦合在一起，当有新的购房者出现时，他只需把手机号码留在售楼处，售楼处不关心购房者的任何情况，不管购房者是男是女还是一只猴子。  而售楼处的任何变动也不会影响购买者，比如售楼 MM 离职，售楼处从一楼搬到二楼，这些改变都跟购房者无关，只要售楼处记得发短信这件事情。")])]),s._v(" "),e("p",[s._v("第一点说明发布—订阅模式可以广泛应用于异步编程中，这是一种替代传递回调函数的方案。\n比如，我们可以订阅 ajax 请求的 error、success 等事件。 或者如果想在动画的每一帧完成之后做一些事情，那我们可以订阅一个事件，然后在动画的每一帧完成之后发布这个事件。在异步编程中使用发布—订阅模式，我们就无需过多关注对象在异步运行期间的内部状态，而只需要订阅感兴趣的事件发生点。")]),s._v(" "),e("p",[s._v("第二点说明发布—订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式地调用另外一个对象的某个接口。发布—订阅模式让两个对象松耦合地联系在一起，虽然不太清楚彼此的细节，但这不影响它们之间相互通信。当有新的订阅者出现时，发布者的代码不需要任何修改；同样发布者需要改变时，也不会影响。")]),s._v(" "),e("h4",{attrs:{id:"dom-事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-事件"}},[s._v("#")]),s._v(" DOM 事件")]),s._v(" "),e("p",[s._v("实际上，只要我们曾经在 DOM 节点上面绑定过事件函数，那我们就曾经使用过发布—订阅\n模式，来看看下面这两句简单的代码发生了什么事情：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("document.body.addEventListener( 'click', function(){ \n    alert(2); \n}, false ); \n \ndocument.body.click();    // 模拟用户点击 \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("在这里需要监控用户点击 document.body 的动作，但是我们没办法预知用户将在什么时候点击。所以我们订阅 document.body 上的 click 事件，当 body 节点被点击时，body 节点便会向订阅者发布这个消息。这很像购房的例子，购房者不知道房子什么时候开售，于是他在订阅消息后等待售楼处发布消息。\n当然我们还可以随意增加或者删除订阅者，增加任何订阅者都不会影响发布者代码的编写：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("document.body.addEventListener( 'click', function(){ \n    alert(2); \n}, false ); \n \ndocument.body.addEventListener( 'click', function(){\n    alert(3); \n}, false ); \n \ndocument.body.addEventListener( 'click', function(){ \n    alert(4); \n}, false ); \n \ndocument.body.click();    // 模拟用户点击 \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("h4",{attrs:{id:"实现-观察者模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现-观察者模式"}},[s._v("#")]),s._v(" 实现 观察者模式")]),s._v(" "),e("p",[s._v("分别用 es5 和 es6 实现\n下面是es5写法")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Producer() {\n\n    // 这个 if 只是避免使用者不小心把 Producer 当作函式来调用\n    if(!(this instanceof Producer)) {\n      throw new Error('请用 new Producer()!');\n      // 仿 ES6 行为可用： throw new Error('Class constructor Producer cannot be invoked without 'new'')\n    }\n\n    this.listeners = [];\n}\n\n// 加入监听的方法\nProducer.prototype.addListener = function(listener) {\n    if(typeof listener === 'function') {\n        this.listeners.push(listener)\n    } else {\n        throw new Error('listener 必须是 function')\n    }\n}\n\n// 移除监听的方法\nProducer.prototype.removeListener = function(listener) {\n    this.listeners.splice(this.listeners.indexOf(listener), 1)\n}\n\n// 发送通知的方法\nProducer.prototype.notify = function(message) {\n    this.listeners.forEach(listener => {\n        listener(message);\n    })\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("p",[s._v("es6版本")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Producer {\n    constructor() {\n        this.listeners = [];\n    }\n    addListener(listener) {\n        if(typeof listener === 'function') {\n            this.listeners.push(listener)\n        } else {\n            throw new Error('listener 必须是 function')\n        }\n    }\n    removeListener(listener) {\n        this.listeners.splice(this.listeners.indexOf(listener), 1)\n    }\n    notify(message) {\n        this.listeners.forEach(listener => {\n            listener(message);\n        })\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[s._v("有了上面的方法，可以实例化了")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var egghead = new Producer(); \n// new 出一个 Producer 实例叫 egghead\n\nfunction listener1(message) {\n    console.log(message + 'from listener1');\n}\n\nfunction listener2(message) {\n    console.log(message + 'from listener2');\n}\n\negghead.addListener(listener1); // 注册监听\negghead.addListener(listener2);\n\negghead.notify('A new course!!') // 当某件事情方法时，执行\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("会输出")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("a new course!! from listener1\na new course!! from listener2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("每当 egghead.notify 执行一次，listener1 跟 listener2 就会被通知，而这些 listener 可以额外被添加，也可以被移除！\n虽然我们的实现很简单，但它很好的说明了 Observer Pattern 如何在事件(event)跟监听者(listener)的互动中做到去藕合(decoupling)。")]),s._v(" "),e("h2",{attrs:{id:"迭代器模式-iterator-pattern"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式-iterator-pattern"}},[s._v("#")]),s._v(" 迭代器模式 Iterator Pattern")]),s._v(" "),e("p",[s._v("迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。\n迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。")]),s._v(" "),e("p",[s._v("JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机制，来处理所有不同的数据结构。")]),s._v(" "),e("p",[s._v("遍历器（Iterator）就是这样一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。\n迭代器 Iterator 本质是一个指针(pointer)对象。\nIterator 的遍历过程是这样的。\n（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。\n（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。\n（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。\n（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。\n先让我们来看看原生的 JS 要怎么建立 iterator")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var arr = [1, 2, 3];\n\nvar iterator = arr[Symbol.iterator]();\n\niterator.next();\n// { value: 1, done: false }\niterator.next();\n// { value: 2, done: false }\niterator.next();\n// { value: 3, done: false }\niterator.next();\n// { value: undefined, done: true }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h4",{attrs:{id:"自己实现-iterator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自己实现-iterator"}},[s._v("#")]),s._v(" 自己实现 Iterator")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function IteratorFromArray(arr) {\n    if(!(this instanceof IteratorFromArray)) {\n        throw new Error('请用 new IteratorFromArray()!');\n    }\n    this._array = arr;\n    this._cursor = 0;   \n}\n\nIteratorFromArray.prototype.next = function() {\n    return this._cursor < this._array.length ?\n        { value: this._array[this._cursor++], done: false } :\n        { done: true };\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[s._v("es6版本")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class IteratorFromArray {\n    constructor(arr) {\n        this._array = arr;\n        this._cursor = 0;\n    }\n\n    next() {\n        return this._cursor < this._array.length ?\n        { value: this._array[this._cursor++], done: false } :\n        { done: true };\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("迭代器模式虽然很单纯，但同时带来了两个优势，第一它渐进式取得数据的特性可以拿来做延迟运算(Lazy evaluation)，让我们能用它来处理数据结构。第二因为 iterator 本身是序列，所以可以实现所有数组的运算方法像 map, filter... 等！")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class IteratorFromArray {\n    constructor(arr) {\n        this._array = arr;\n        this._cursor = 0;\n    }\n\n    next() {\n        return this._cursor < this._array.length ?\n        { value: this._array[this._cursor++], done: false } :\n        { done: true };\n    }\n\n    map(callback) {\n        const iterator = new IteratorFromArray(this._array);\n        return {\n            next: () => {\n                const { done, value } = iterator.next();\n                return {\n                    done: done,\n                    value: done ? undefined : callback(value)\n                }\n            }\n        }\n    }\n}\n\nvar iterator = new IteratorFromArray([1,2,3]);\nvar newIterator = iterator.map(value => value + 3);\n\nnewIterator.next();\n// { value: 4, done: false }\nnewIterator.next();\n// { value: 5, done: false }\nnewIterator.next();\n// { value: 6, done: false }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("h4",{attrs:{id:"补充-延迟运算-lazy-evaluation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#补充-延迟运算-lazy-evaluation"}},[s._v("#")]),s._v(" 补充: 延迟运算(Lazy evaluation)")]),s._v(" "),e("p",[s._v("延迟运算，或说 call-by-need，是一种运算策略(evaluation strategy)，简单来说我们延迟一个表达式的运算时机直到真正需要它的值在做运算。\n以下我们用 generator 实作 iterator 来举一个例子")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function* getNumbers(words) {\n        for (let word of words) {\n            if (/^[0-9]+$/.test(word)) {\n                yield parseInt(word, 10);\n            }\n        }\n    }\n\n    const iterator = getNumbers('30 天精通 RxJS (04)');\n\n    iterator.next();\n    // { value: 3, done: false }\n    iterator.next();\n    // { value: 0, done: false }\n    iterator.next();\n    // { value: 0, done: false }\n    iterator.next();\n    // { value: 4, done: false }\n    iterator.next();\n    // { value: undefined, done: true }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("这么我们写了一个函数用来抓取字串中的数字，在这个函数中我们用 for...of 的方式来取得每个字符并用正则表示式来判断是不是数值，如果为真就转成数值并回传。当我们把一个字串丢进 getNumbers 函式时，并没有马上运算出字串中的所有数字，必须等到我们执行 next() 时，才会真的做运算，这就是所谓的延迟运算(evaluation strategy)")]),s._v(" "),e("h2",{attrs:{id:"observable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#observable"}},[s._v("#")]),s._v(" Observable")]),s._v(" "),e("p",[s._v("在了解 Observer 跟 Iterator 后，不知道大家有没有发现其实 Observer 跟 Iterator 有个共通的特性，就是他们都是渐进式(progressive) 的取得数据，差别只在于 Observer 是生产者(Producer)推送数据(push)，而 Iterator 是消费者(Consumer)拉数据(pull)!")]),s._v(" "),e("blockquote",[e("p",[e("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-48b8319d3a3ad25c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})])]),s._v(" "),e("p",[s._v("Observable 其实就是这两个 Pattern 思想的结合，Observable 具备生产者推送数据的特性，同时能像数组，拥有数组处理数据的方法(map, filter...)！")]),s._v(" "),e("p",[s._v("下节讲 如何创建 Observable 。")]),s._v(" "),e("p",[s._v("参考：\nhttp://es6.ruanyifeng.com/#docs/iterator")])])}),[],!1,null,null,null);n.default=r.exports}}]);