(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{581:function(n,e,s){"use strict";s.r(e);var a=s(30),t=Object(a.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("ol",[s("li",[n._v("COPY 和 ADD 命令具有相同的特点：只复制目录中的内容而不包含目录自身。\n比如 backend 目录的结构如下：")])]),n._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("---")]),n._v(" backend\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),n._v(" model\n     "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),n._v(" controller\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("p",[n._v("如果执行")]),n._v(" "),s("div",{staticClass:"language-bash line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("WORKDIR /app\nCOPY backend "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br")])]),s("p",[n._v("容器内app底下会是model和controller目录，并不是backend目录。\n如果要拷贝整个目录，应该：\n"),s("code",[n._v("COPY backend ./backend")]),n._v("\n2. 如果修改了 Dockerfile，记得要重新执行build，即生成新的镜像。这样启动后才能看到效果。\n3. 打包node项目中的node_modules问题。\n某node项目结构:")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("src\nnode_modules\npackage.json\npackage-lock.json\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br")])]),s("p",[n._v("dockerfile部分代码")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("FROM node:8.12-alpine\nRUN mkdir -p /app\nWORKDIR /app\nCOPY package.json .\nCOPY package-lock.json .\nRUN npm install\n...\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("我们在容器内生成了项目所依赖的node_modules文件。这是docker的build阶段。\n之后在run启动阶段时，在mouted共享目录时要特别小心，如果挂载整个项目，容器内的node_modules会被项目中的覆盖。\n最好把需要挂载的文件单独放到一个目录中。\n4. 关于项目目录是挂载好，还是COPY ADD好，stackoverflow上有人也"),s("a",{attrs:{href:"https://stackoverflow.com/questions/27735706/docker-add-vs-volume",target:"_blank",rel:"noopener noreferrer"}},[n._v("问过"),s("OutboundLink")],1)]),n._v(" "),s("ul",[s("li",[n._v("COPY/ADD 文件是镜像的一部分，在docker构建阶段执行。比较适合项目的生产环境，比如自动化。对于成熟稳定的项目，把编译后的可以直接运行的代码打包进镜像内也利于分发。")]),n._v(" "),s("li",[n._v("volumn 是在docker运行阶段，本地文件变化能方便的反应到容器中，比较适合项目的开发阶段。\n要根据实际情况，挂载可以节省空间，便于修改。如果是想文件COPY到容器，每次修改文件都需要重新制作镜像。")])]),n._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[n._v("关于 docker-compose，对于镜像的版本，数据库密码等不建议直接写死到 docker-compose.yml 中，可以新建.env文件。\ndocker-compose部分")])]),n._v(" "),s("div",{staticClass:"language-yaml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[n._v("  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[n._v("mysql")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[n._v("build")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" ./docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),n._v("build/mysql\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[n._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"33060:3306"')]),n._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[n._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),n._v(" ./docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),n._v("build/mysql/data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("/var/lib/mysql\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[n._v("environment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[n._v("MYSQL_ROOT_PASSWORD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(":")]),n._v(" $"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("DOCKER_MYSQL_PASSPORD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("123456")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br")])]),s("p",[n._v(".env文件\n"),s("code",[n._v("DOCKER_MYSQL_PASSPORD=mypassord")]),n._v("\n比如下面的"),s("code",[n._v("${DOCKER_MYSQL_PASSPORD-123456}")]),n._v("表示优先去"),s("code",[n._v(".env")]),n._v("文件找定义的key值，如果没有则使用默认值，即123456。\ndocker-compose.yml 受版本控制，.env不受。更多细节"),s("a",{attrs:{href:"https://docs.docker.com/compose/env-file/",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),s("OutboundLink")],1),n._v("\n6. 在 Laravel 项目中，如果数据库跑在容器里，在宿主机直接执行 "),s("code",[n._v("php aritsan")]),n._v("是不行的，\n需要进到容器里执行，或者在宿主机执行"),s("code",[n._v("docker-compose exec <mycontainer> php artisan")]),n._v("或者是"),s("code",[n._v("docker exec -it <mycontainer> php artisan")]),n._v("\n7. 如果php项目用的nginx的php-fpm容器，想重启php-fpm，容器内使用"),s("code",[n._v("kill -USR2 1")]),n._v("，容器外执行"),s("code",[n._v("docker exec -it <mycontainer> kill -USR2 1")]),s("br"),n._v('\n8. docker-compose down要慎用，他会销毁所有容器和网络等。如果你之前在容器里修改过文件，都会没有。当然docker也不推荐直接在容器动手脚，建议写个shell脚本，启动之后在容器内执行。\n9. 还是 mysql 数据库问题，如果容器启动了 mysql，之后通过配置修改了密码，可能会造成重新连接后死活显示"Access denied"。\n这是因为如果建立了共享卷volume，里面存的还是老的user信息，需要'),s("code",[n._v("docker-compose rm -v")]),n._v(" 清除卷然后重连。\n10. 删除日志 "),s("code",[n._v('find /var/lib/docker/containers/ -type f -name "*.log" -delete')]),n._v("\n11. 删除所有停止的容器 "),s("code",[n._v("docker rm $(docker ps -a -q)")]),n._v("\n12. Docker 提供了方便的 "),s("code",[n._v("docker system prune")]),n._v(" 命令来删除那些已停止的容器、dangling 镜像、未被容器引用的 network 和构建过程中的 cache.\n安全起见，这个命令默认不会删除那些未被任何容器引用的数据卷，如果需要同时删除这些数据卷，你需要显式的指定 --volumns 参数。比如你可能想要执行下面的命令：\n"),s("code",[n._v("docker system prune --all --force --volumns")])]),n._v(" "),s("blockquote",[s("p",[n._v("注意，使用 --all 参数后会删除所有未被引用的镜像而不仅仅是 dangling 镜像。")])]),n._v(" "),s("blockquote",[s("p",[n._v("何为 dangling images，其实可以简单的理解为未被任何镜像引用的镜像。比如在你重新构建了镜像后，那些之前构建的且不再被引用的镜像层就变成了 dangling images")])]),n._v(" "),s("p",[n._v("我们还可在不同在子命令下执行 prune，这样删除的就是某类资源：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("docker container prune # 删除所有退出状态的容器\ndocker volume prune # 删除未被使用的数据卷\ndocker image prune # 删除 dangling 或所有未被使用的镜像\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br")])]),s("ol",{attrs:{start:"13"}},[s("li",[n._v("docker diff 容器名或ID，可以查看容器发生的文件系统的变化信息\n如下图，我在容器里新建了个demo.txt文件，在docker diff中可以查看出来\nA 添加， C 修改， D 删除")])]),n._v(" "),s("blockquote",[s("p",[s("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-82443f79715cc69e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})])]),n._v(" "),s("p",[n._v("参考：http://blog.51cto.com/13954634/2294107")])])}),[],!1,null,null,null);e.default=t.exports}}]);