(window.webpackJsonp=window.webpackJsonp||[]).push([[355],{791:function(n,e,s){"use strict";s.r(e);var t=s(30),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("p",[n._v("debounce 与 throttle是用户交互处理中常用到的性能提速方案，debounce用来实现防抖动，throttle用来实现节流（限频）\ndebounce  当调用动作n毫秒后，才会执行该动作，若在这n毫秒内又调用此动作则将重新计算执行时间。执行太快的话会忽略，直到慢到指定时刻才去执行。")]),n._v(" "),s("p",[n._v("throttle 预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。")]),n._v(" "),s("blockquote",[s("p",[n._v("debounce 和 throttle 他们两个的作用都是要降低事件的触发頻率，但行为上有很大的不同。throttle 比较像是控制行为的最高頻率，也就是说如果我们设定 1000 毫秒，那该事件频率的最大值就是每秒触发一次不会再更快，debounce 则比较像要等到一定的时间过了才会收到元素。")])]),n._v(" "),s("p",[n._v("debounce:   接收一个返回Observable的方法，可以传入interval，timer等\ndebounce会根舍弃掉在两次输出之间小于指定时间的发出值。\ndebounceTime: 接收毫秒数，舍弃掉在两次输出之间小于指定时间的发出值。\n适用场景：搜索栏输入关键词请求后台拿数据，防止频繁发请求。\ndebounceTime 比 debounce 使用更频繁")]),n._v(" "),s("p",[n._v("throttle 节流： 接收一个返回Observable的方法，可以传入interval，timer等\nthrottleTime： 接收毫秒数，经过指定的这个时间后发出最新值。")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("    const { interval, timer } = rxjs;\n    const { debounce } = rxjs.operators;\n\n    // 每1秒发出值, 示例: 0...1...2\n    const interval$ = interval(1000);\n    // 每1秒都将 debounce 的时间增加200毫秒\n    const debouncedInterval = interval$.pipe(debounce(val => timer(val * 200)));\n    /*\n      5秒后，debounce 的时间会大于 interval 的时间，之后所有的值都将被丢弃\n      输出: 0...1...2...3...4......(debounce 的时间大于1秒后则不再发出值)\n    */\n    const subscribe = debouncedInterval.subscribe(val =>\n        console.log(`Example Two: ${val}`)\n    );\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("p",[n._v("debounceTime 例子")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("<body>\n    <input type=\"text\" id=\"example\">\n</body>\n<script src='../lib/rxjs6.3.3.umd.js'><\/script>\n<script>\n    // https://rxjs-cn.github.io/learn-rxjs-operators/operators/filtering/debouncetime.html\n    // debounceTime\n    // 舍弃掉在两次输出之间小于指定时间的发出值\n    // 此操作符在诸如预先知道用户的输入频率的场景下很受欢迎！\n\n    const { fromEvent, timer } = rxjs;\n    const { debounceTime, map } = rxjs.operators;\n\n    const input = document.getElementById('example');\n\n    // 对于每次键盘敲击，都将映射成当前输入值\n    const example = fromEvent(input, 'keyup').pipe(map(i => i.currentTarget.value));\n\n    // 在两次键盘敲击之间等待0.5秒方才发出当前值，\n    // 并丢弃这0.5秒内的所有其他值\n    const debouncedInput = example.pipe(debounceTime(500));\n\n    // 输出值\n    const subscribe = debouncedInput.subscribe(val => {\n        console.log(`Debounced Input: ${val}`);\n    });\n\n<\/script>\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);