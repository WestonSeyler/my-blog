(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{706:function(e,r,n){"use strict";n.r(r);var s=n(30),a=Object(s.a)({},(function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("原文链接："),n("strong",[n("a",{attrs:{href:"https://blog.angularindepth.com/never-again-be-confused-when-implementing-controlvalueaccessor-in-angular-forms-93b9eee9ee83",target:"_blank",rel:"noopener noreferrer"}},[e._v("Never again be confused when implementing ControlValueAccessor in Angular forms"),n("OutboundLink")],1)])]),e._v(" "),n("p",[e._v("如果你正在做一个复杂项目，必然会需要自定义表单控件，这个控件主要需要实现 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口（译者注：该接口定义方法可参考 "),n("strong",[n("a",{attrs:{href:"https://angular.io/api/forms/ControlValueAccessor",target:"_blank",rel:"noopener noreferrer"}},[e._v("API 文档说明"),n("OutboundLink")],1)]),e._v("，也可参考 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/control_value_accessor.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("Angular 源码定义"),n("OutboundLink")],1)]),e._v("）。网上有大量文章描述如何实现这个接口，但很少说到它在 Angular 表单架构里扮演什么角色，如果你不仅仅想知道如何实现，还想知道为什么这样实现，那本文正合你的胃口。")]),e._v(" "),n("p",[e._v("首先我解释下为啥需要 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口以及它在 Angular 中是如何使用的。然后我将展示如何封装第三方组件作为 Angular 组件，以及如何使用输入输出机制实现组件间通信（译者注：Angular 组件间通信输入输出机制可参考**"),n("a",{attrs:{href:"https://angular.io/guide/component-interaction",target:"_blank",rel:"noopener noreferrer"}},[e._v("官网文档"),n("OutboundLink")],1),n("strong",[e._v("），最后将展示如何使用 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 来实现一种")]),e._v("针对 Angular 表单**新的数据通信机制。")]),e._v(" "),n("h2",{attrs:{id:"formcontrol-和-controlvalueaccessor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#formcontrol-和-controlvalueaccessor"}},[e._v("#")]),e._v(" FormControl 和 ControlValueAccessor")]),e._v(" "),n("p",[e._v("如果你之前使用过 Angular 表单，你可能会熟悉 "),n("strong",[n("a",{attrs:{href:"https://angular.io/api/forms/FormControl",target:"_blank",rel:"noopener noreferrer"}},[e._v("FormControl"),n("OutboundLink")],1)]),e._v(" ，Angular 官方文档将它描述为追踪单个表单控件"),n("strong",[e._v("值和有效性")]),e._v("的实体对象。需要明白，不管你使用模板驱动还是响应式表单（译者注：即模型驱动），"),n("code",[e._v("FormControl")]),e._v(" 都总会被创建。如果你使用响应式表单，你需要显式创建 "),n("code",[e._v("FormControl")]),e._v(" 对象，并使用 "),n("code",[e._v("formControl")]),e._v(" 或 "),n("code",[e._v("formControlName")]),e._v(" 指令来绑定原生控件；如果你使用模板驱动方法，"),n("code",[e._v("FormControl")]),e._v(" 对象会被 "),n("strong",[n("a",{attrs:{href:"https://angular.io/api/forms/NgModel",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("NgModel")]),n("OutboundLink")],1)]),e._v(" 指令隐式创建（译者注：可查看 Angular 源码**"),n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/ng_model.ts#L113",target:"_blank",rel:"noopener noreferrer"}},[e._v("这一行"),n("OutboundLink")],1),e._v("**）：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Directive({\n  selector: '[ngModel]...',\n  ...\n})\nexport class NgModel ... {\n  _control = new FormControl();   <---------------- here\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[e._v("不管 "),n("code",[e._v("formControl")]),e._v(" 是隐式还是显式创建，都必须和原生 DOM 表单控件如 "),n("code",[e._v("input,textarea")]),e._v(" 进行交互，并且很有可能需要自定义一个表单控件作为 Angular 组件而不是使用原生表单控件，而通常自定义表单控件会封装一个使用纯 JS 写的控件如 "),n("strong",[n("a",{attrs:{href:"https://jqueryui.com/slider/",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("jQuery UI's Slider")]),n("OutboundLink")],1)]),e._v("。本文我将使用"),n("strong",[e._v("原生表单控件")]),e._v("术语来区分 Angular 特定的 "),n("code",[e._v("formControl")]),e._v(" 和你在 "),n("code",[e._v("html")]),e._v(" 使用的表单控件，但你需要知道任何一个自定义表单控件都可以和 "),n("code",[e._v("formControl")]),e._v(" 指令进行交互，而不是原生表单控件如 "),n("code",[e._v("input")]),e._v("。")]),e._v(" "),n("p",[e._v("原生表单控件数量是有限的，但是自定义表单控件是无限的，所以 Angular 需要一种通用机制来"),n("strong",[e._v("桥接")]),e._v("原生/自定义表单控件和 "),n("code",[e._v("formControl")]),e._v(" 指令，而这正是 "),n("strong",[n("a",{attrs:{href:"https://angular.io/api/forms/ControlValueAccessor",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("ControlValueAccessor")]),n("OutboundLink")],1)]),e._v(" 干的事情。这个对象桥接原生表单控件和 "),n("code",[e._v("formControl")]),e._v(" 指令，并同步两者的值。官方文档是这么描述的（译者注：为清晰理解，该描述不翻译）：")]),e._v(" "),n("blockquote",[n("p",[e._v("ControlValueAccessor acts as a bridge between the Angular forms API and a native element in the DOM.")])]),e._v(" "),n("p",[e._v("任何一个组件或指令都可以通过实现 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口并注册为 "),n("code",[e._v("NG_VALUE_ACCESSOR")]),e._v("，从而转变成 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 类型的对象，稍后我们将一起看看如何做。另外，这个接口还定义两个重要方法——"),n("code",[e._v("writeValue")]),e._v(" 和 "),n("code",[e._v("registerOnChange")]),e._v(" （译者注：可查看 Angular 源码**"),n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/control_value_accessor.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("这一行"),n("OutboundLink")],1),e._v("**）：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface ControlValueAccessor {\n  writeValue(obj: any): void\n  registerOnChange(fn: any): void\n  registerOnTouched(fn: any): void\n  ...\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br")])]),n("p",[n("code",[e._v("formControl")]),e._v(" 指令使用 "),n("code",[e._v("writeValue")]),e._v(" 方法设置原生表单控件的值（译者注：你可能会参考 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/reactive_directives/form_control_directive.ts#L186",target:"_blank",rel:"noopener noreferrer"}},[e._v("L186"),n("OutboundLink")],1)]),e._v(" 和 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L41",target:"_blank",rel:"noopener noreferrer"}},[e._v("L41"),n("OutboundLink")],1)]),e._v("）；使用 "),n("code",[e._v("registerOnChange")]),e._v(" 方法来注册由每次原生表单控件值更新时触发的回调函数（译者注：你可能会参考这三行，"),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/reactive_directives/form_control_directive.ts#L186",target:"_blank",rel:"noopener noreferrer"}},[e._v("L186"),n("OutboundLink")],1)]),e._v(" 和 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L43",target:"_blank",rel:"noopener noreferrer"}},[e._v("L43"),n("OutboundLink")],1)]),e._v("，以及 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L85",target:"_blank",rel:"noopener noreferrer"}},[e._v("L85"),n("OutboundLink")],1)]),e._v("），"),n("strong",[e._v("你需要把更新的值传给这个回调函数，这样对应的 Angular 表单控件值也会更新")]),e._v("（译者注：这一点可以参考 Angular 它自己写的 "),n("code",[e._v("DefaultValueAccessor")]),e._v(" 的写法是如何把 input 控件每次更新值传给回调函数的，"),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/default_value_accessor.ts#L52",target:"_blank",rel:"noopener noreferrer"}},[e._v("L52"),n("OutboundLink")],1)]),e._v(" 和 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/default_value_accessor.ts#L89",target:"_blank",rel:"noopener noreferrer"}},[e._v("L89"),n("OutboundLink")],1)]),e._v("）；使用 "),n("code",[e._v("registerOnTouched")]),e._v(" 方法来注册用户和控件交互时触发的回调（译者注：你可能会参考 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L95",target:"_blank",rel:"noopener noreferrer"}},[e._v("L95"),n("OutboundLink")],1)]),e._v("）。")]),e._v(" "),n("p",[e._v("下图是 "),n("code",[e._v("Angular 表单控件")]),e._v(" 如何通过 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 来和"),n("code",[e._v("原生表单控件")]),e._v("交互的（译者注："),n("code",[e._v("formControl")]),e._v(" 和"),n("strong",[e._v("你写的或者 Angular 提供的 "),n("code",[e._v("CustomControlValueAccessor")])]),e._v(" 两个都是要绑定到 native DOM element 的指令，而 "),n("code",[e._v("formControl")]),e._v(" 指令需要借助 "),n("code",[e._v("CustomControlValueAccessor")]),e._v(" 指令/组件，来和 native DOM element 交换数据。）：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-6472dba47b83db3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),e._v(" "),n("p",[e._v("再次强调，不管是使用响应式表单显式创建还是使用模板驱动表单隐式创建，"),n("code",[e._v("ControlValueAccessor")]),e._v(" 都总是和 Angular 表单控件进行交互。")]),e._v(" "),n("p",[e._v("Angular 也为所有原生 DOM 表单元素创建了 "),n("code",[e._v("Angular")]),e._v(" 表单控件（译者注：Angular 内置的 ControlValueAccessor）：")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Accessor")]),e._v(" "),n("th",[e._v("Form Element")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/default_value_accessor.ts#L47",target:"_blank",rel:"noopener noreferrer"}},[e._v("DefaultValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("input,textarea")])]),e._v(" "),n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/checkbox_value_accessor.ts#L31",target:"_blank",rel:"noopener noreferrer"}},[e._v("CheckboxControlValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("input[type=checkbox]")])]),e._v(" "),n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/number_value_accessor.ts#L30",target:"_blank",rel:"noopener noreferrer"}},[e._v("NumberValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("input[type=number]")])]),e._v(" "),n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/radio_control_value_accessor.ts#L88",target:"_blank",rel:"noopener noreferrer"}},[e._v("RadioControlValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("input[type=radio]")])]),e._v(" "),n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/range_value_accessor.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("RangeValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("input[type=range]")])]),e._v(" "),n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/select_control_value_accessor.ts#L94",target:"_blank",rel:"noopener noreferrer"}},[e._v("SelectControlValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("select")])]),e._v(" "),n("tr",[n("td",[n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/select_multiple_control_value_accessor.ts#L74",target:"_blank",rel:"noopener noreferrer"}},[e._v("SelectMultipleControlValueAccessor"),n("OutboundLink")],1)])]),e._v(" "),n("td",[e._v("select[multiple]")])])])]),e._v(" "),n("p",[e._v("从上表中可看到，当 Angular 在组件模板中中遇到 "),n("code",[e._v("input")]),e._v(" 或 "),n("code",[e._v("textarea")]),e._v(" DOM 原生控件时，会使用"),n("code",[e._v("DefaultValueAccessor")]),e._v(" 指令：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component({\n  selector: 'my-app',\n  template: `\n      <input [formControl]=\"ctrl\">\n  `\n})\nexport class AppComponent {\n  ctrl = new FormControl(3);\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("所有表单指令，包括上面代码中的 "),n("code",[e._v("formControl")]),e._v(" 指令，都会调用 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L35",target:"_blank",rel:"noopener noreferrer"}},[e._v("setUpControl"),n("OutboundLink")],1)]),e._v(" 函数来让表单控件和"),n("code",[e._v("DefaultValueAccessor")]),e._v(" 实现交互（译者注：意思就是上面代码中绑定的 "),n("code",[e._v("formControl")]),e._v(" 指令，在其自身实例化时，会调用 "),n("code",[e._v("setUpControl()")]),e._v(" 函数给同样绑定到 "),n("code",[e._v("input")]),e._v("的 "),n("code",[e._v("DefaultValueAccessor")]),e._v(" 指令做好安装工作，如 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L85",target:"_blank",rel:"noopener noreferrer"}},[e._v("L85"),n("OutboundLink")],1)]),e._v("，这样 "),n("code",[e._v("formControl")]),e._v(" 指令就可以借助 "),n("code",[e._v("DefaultValueAccessor")]),e._v(" 来和 "),n("code",[e._v("input")]),e._v(" 元素交换数据了）。细节可参考 "),n("code",[e._v("formControl")]),e._v(" 指令的代码：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export class FormControlDirective ... {\n  ...\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._isControlChanged(changes)) {\n      setUpControl(this.form, this);\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("还有 "),n("code",[e._v("setUpControl")]),e._v(" 函数源码也指出了原生表单控件和 Angular 表单控件是如何数据同步的（译者注：作者贴的可能是 Angular v4.x 的代码，v5 有了点小小变动，但基本相似）：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function setUpControl(control: FormControl, dir: NgControl) {\n\n  // initialize a form control\n  // 调用 writeValue() 初始化表单控件值\n  dir.valueAccessor.writeValue(control.value);\n\n  // setup a listener for changes on the native control\n  // and set this value to form control\n  // 设置原生控件值更新时监听器，每当原生控件值更新，Angular 表单控件值也更新\n  valueAccessor.registerOnChange((newValue: any) => {\n    control.setValue(newValue, {emitModelToViewChange: false});\n  });\n\n  // setup a listener for changes on the Angular formControl\n  // and set this value to the native control\n  // 设置 Angular 表单控件值更新监听器，每当 Angular 表单控件值更新，原生控件值也更新\n  control.registerOnChange((newValue: any, ...) => {\n    dir.valueAccessor.writeValue(newValue);\n  });\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br")])]),n("p",[e._v("只要我们理解了内部机制，就可以实现我们自定义的 Angular 表单控件了。")]),e._v(" "),n("h2",{attrs:{id:"组件封装器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件封装器"}},[e._v("#")]),e._v(" 组件封装器")]),e._v(" "),n("p",[e._v("由于 Angular 为所有默认原生控件提供了控件值访问器，所以在封装第三方插件或组件时，需要写一个新的控件值访问器。我们将使用上文提到的 jQuery UI 库的 "),n("strong",[n("a",{attrs:{href:"https://jqueryui.com/slider/",target:"_blank",rel:"noopener noreferrer"}},[e._v("slider"),n("OutboundLink")],1)]),e._v(" 插件，来实现一个自定义表单控件吧。")]),e._v(" "),n("h3",{attrs:{id:"简单的封装器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单的封装器"}},[e._v("#")]),e._v(" 简单的封装器")]),e._v(" "),n("p",[e._v("最基础实现是通过简单封装使其能在屏幕上显示出来，所以我们需要一个 "),n("code",[e._v("NgxJquerySliderComponent")]),e._v(" 组件，并在其模板里渲染出 "),n("code",[e._v("slider")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component({\n  selector: 'ngx-jquery-slider',\n  template: `\n      <div #location></div>\n  `,\n  styles: ['div {width: 100px}']\n})\nexport class NgxJquerySliderComponent {\n  @ViewChild('location') location;\n  widget;\n  ngOnInit() {\n    this.widget = $(this.location.nativeElement).slider();\n  }\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br")])]),n("p",[e._v("这里我们使用标准的 "),n("code",[e._v("jQuery")]),e._v(" 方法在原生 DOM 元素上创建一个 "),n("code",[e._v("slider")]),e._v(" 控件，然后使用 "),n("code",[e._v("widget")]),e._v(" 属性引用这个控件。")]),e._v(" "),n("p",[e._v("一旦简单封装好了 "),n("code",[e._v("slider")]),e._v(" 组件，我们就可以在父组件模板里使用它：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component({\n  selector: 'my-app',\n  template: `\n      <h1>Hello {{name}}</h1>\n      <ngx-jquery-slider></ngx-jquery-slider>\n  `\n})\nexport class AppComponent { ... }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("为了运行程序我们需要加入 "),n("code",[e._v("jQuery")]),e._v(" 相关依赖，简化起见，在 "),n("code",[e._v("index.html")]),e._v(" 中添加全局依赖：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<script src="https://code.jquery.com/jquery-3.2.1.js"><\/script>\n<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"><\/script>\n<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/smoothness/jquery-ui.css">\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])]),n("p",[e._v("这里是安装依赖的**"),n("a",{attrs:{href:"https://plnkr.co/edit/OyCXMLwVcWQelO1en9tR?p=preview",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),n("OutboundLink")],1),e._v("**。")]),e._v(" "),n("h3",{attrs:{id:"交互式表单控件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#交互式表单控件"}},[e._v("#")]),e._v(" 交互式表单控件")]),e._v(" "),n("p",[e._v("上面的实现还不能让我们自定义的 "),n("code",[e._v("slider")]),e._v(" 控件与父组件交互，所以还得使用输入/输出绑定来是实现组件间数据通信：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export class NgxJquerySliderComponent {\n  @ViewChild('location') location;\n  @Input() value;\n  @Output() private valueChange = new EventEmitter();\n  widget;\n\n  ngOnInit() {\n    this.widget = $(this.location.nativeElement).slider();   \n    this.widget.slider('value', this.value);\n    this.widget.on('slidestop', (event, ui) => {\n      this.valueChange.emit(ui.value);\n    });\n  }\n\n  ngOnChanges() {\n    if (this.widget && this.widget.slider('value') !== this.value) {\n      this.widget.slider('value', this.value);\n    }\n  }\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br")])]),n("p",[e._v("一旦 "),n("code",[e._v("slider")]),e._v(" 组件创建，就可以订阅 "),n("code",[e._v("slidestop")]),e._v(" 事件获取变化的值，一旦 "),n("code",[e._v("slidestop")]),e._v(" 事件被触发了，就可以使用输出事件发射器 "),n("code",[e._v("valueChanges")]),e._v(" 通知父组件。当然我们也可以使用 "),n("code",[e._v("ngOnChanges")]),e._v(" 生命周期钩子来追踪输入属性 "),n("code",[e._v("value")]),e._v(" 值的变化，一旦其值变化，我们就将该值设置为 "),n("code",[e._v("slider")]),e._v(" 控件的值。")]),e._v(" "),n("p",[e._v("然后就是父组件中如何使用 "),n("code",[e._v("slider")]),e._v(" 组件的代码实现：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<ngx-jquery-slider\n    [value]="sliderValue"\n    (valueChange)="onSliderValueChange($event)">\n</ngx-jquery-slider>\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("**"),n("a",{attrs:{href:"https://plnkr.co/edit/bCrkvABQkRZXrnVvTW7D?p=preview",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),n("OutboundLink")],1),e._v("**在这里。")]),e._v(" "),n("p",[e._v("但是，我们想要的是，使用 "),n("code",[e._v("slider")]),e._v(" 组件作为表单的一部分，并使用模板驱动表单或响应式表单的指令与其数据通信，那就需要让其实现 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口了。由于我们将实现的是新的组件通信方式，所以不需要标准的输入输出属性绑定方式，那就移除相关代码吧。（译者注：作者先实现标准的输入输出属性绑定的通信方式，又要删除，主要是为了引入"),n("strong",[e._v("新的表单组件交互方式")]),e._v("，即 "),n("code",[e._v("ControlValueAccessor")]),e._v("。）")]),e._v(" "),n("h2",{attrs:{id:"实现自定义控件值访问器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现自定义控件值访问器"}},[e._v("#")]),e._v(" 实现自定义控件值访问器")]),e._v(" "),n("p",[e._v("实现自定义控件值访问器并不难，只需要两步：")]),e._v(" "),n("ol",[n("li",[e._v("注册 "),n("code",[e._v("NG_VALUE_ACCESSOR")]),e._v(" 提供者")]),e._v(" "),n("li",[e._v("实现 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口")])]),e._v(" "),n("p",[n("code",[e._v("NG_VALUE_ACCESSOR")]),e._v(" 提供者用来指定实现了 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口的类，并且被 Angular 用来和 "),n("code",[e._v("formControl")]),e._v("同步，通常是使用组件类或指令来注册。所有表单指令都是使用"),n("code",[e._v("NG_VALUE_ACCESSOR")]),e._v(" 标识来注入控件值访问器，然后选择合适的访问器（译者注：这句话可参考这两行代码，"),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/reactive_directives/form_control_directive.ts#L175",target:"_blank",rel:"noopener noreferrer"}},[e._v("L175"),n("OutboundLink")],1)]),e._v(" 和 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/reactive_directives/form_control_directive.ts#L181",target:"_blank",rel:"noopener noreferrer"}},[e._v("L181"),n("OutboundLink")],1)]),e._v("）。要么选择"),n("code",[e._v("DefaultValueAccessor")]),e._v(" 或者内置的数据访问器，否则 Angular 将会选择自定义的数据访问器，并且有且只有一个自定义的数据访问器（译者注：这句话参考 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L186",target:"_blank",rel:"noopener noreferrer"}},[n("code",[e._v("selectValueAccessor")]),e._v(" 源码实现"),n("OutboundLink")],1)]),e._v("）。")]),e._v(" "),n("p",[e._v("让我们首先定义提供者：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component({\n  selector: 'ngx-jquery-slider',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: NgxJquerySliderComponent,\n    multi: true\n  }]\n  ...\n})\nclass NgxJquerySliderComponent implements ControlValueAccessor {...}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("p",[e._v("我们直接在组件装饰器里直接指定类名，然而 Angular 源码默认实现是放在类装饰器外面：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export const DEFAULT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => DefaultValueAccessor),\n  multi: true\n};\n@Directive({\n  selector:'input',\n  providers: [DEFAULT_VALUE_ACCESSOR]\n  ...\n})\nexport class DefaultValueAccessor implements ControlValueAccessor {}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br")])]),n("p",[e._v("放在外面就需要使用 "),n("code",[e._v("forwardRef")]),e._v("，关于原因可以参考 "),n("strong",[n("a",{attrs:{href:"https://blog.angularindepth.com/what-is-forwardref-in-angular-and-why-we-need-it-6ecefb417d48",target:"_blank",rel:"noopener noreferrer"}},[e._v("What is forwardRef in Angular and why we need it"),n("OutboundLink")],1)]),e._v(" 。当实现自定义 "),n("code",[e._v("controlValueAccessor")]),e._v("，我建议还是放在类装饰器里吧（译者注：个人建议还是学习 Angular 源码那样放在外面）。")]),e._v(" "),n("p",[e._v("一旦定义了提供者后，就让我们实现 "),n("code",[e._v("controlValueAccessor")]),e._v(" 接口：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export class NgxJquerySliderComponent implements ControlValueAccessor {\n  @ViewChild('location') location;\n  widget;\n  onChange;\n  value;\n\nngOnInit() {\n    this.widget = $(this.location.nativeElement).slider(this.value);\n   this.widget.on('slidestop', (event, ui) => {\n      this.onChange(ui.value);\n    });\n}\n\nwriteValue(value) {\n    this.value = value;\n    if (this.widget && value) {\n      this.widget.slider('value', value);\n    }\n  }\n\nregisterOnChange(fn) { this.onChange = fn;  }\n\nregisterOnTouched(fn) {  }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("由于我们对用户是否与组件交互不感兴趣，所以先把 "),n("code",[e._v("registerOnTouched")]),e._v(" 置空吧。在"),n("code",[e._v("registerOnChange")]),e._v(" 里我们简单保存了对回调函数 "),n("code",[e._v("fn")]),e._v(" 的引用，回调函数是由 "),n("code",[e._v("formControl")]),e._v(" 指令传入的（译者注：参考 "),n("strong",[n("a",{attrs:{href:"https://github.com/angular/angular/blob/master/packages/forms/src/directives/shared.ts#L85",target:"_blank",rel:"noopener noreferrer"}},[e._v("L85"),n("OutboundLink")],1)]),e._v("），只要每次 "),n("code",[e._v("slider")]),e._v(" 组件值发生改变，就会触发这个回调函数。在 "),n("code",[e._v("writeValue")]),e._v(" 方法内我们把得到的值传给 "),n("code",[e._v("slider")]),e._v(" 组件。")]),e._v(" "),n("p",[e._v("现在我们把上面描述的功能做成一张交互式图：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://hexo-blog.pek3b.qingstor.com/upload_images/71414-8bd2e8cc37f7ce0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"image.png"}})]),e._v(" "),n("p",[e._v("如果你把简单封装和 "),n("code",[e._v("controlValueAccessor")]),e._v(" 封装进行比较，你会发现父子组件交互方式是不一样的，尽管封装的组件与 "),n("code",[e._v("slider")]),e._v(" 组件的交互是一样的。你可能注意到 "),n("code",[e._v("formControl")]),e._v(" 指令实际上简化了与父组件交互的方式。这里我们使用 "),n("code",[e._v("writeValue")]),e._v(" 来向子组件写入数据，而在简单封装方法中使用 "),n("code",[e._v("ngOnChanges")]),e._v("；调用 "),n("code",[e._v("this.onChange")]),e._v(" 方法输出数据，而在简单封装方法中使用 "),n("code",[e._v("this.valueChange.emit(ui.value)")]),e._v("。")]),e._v(" "),n("p",[e._v("现在，实现了 "),n("code",[e._v("ControlValueAccessor")]),e._v(" 接口的自定义 "),n("code",[e._v("slider")]),e._v(" 表单控件完整代码如下：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component({\n  selector: \'my-app\',\n  template: `\n      <h1>Hello {{name}}</h1>\n      <span>Current slider value: {{ctrl.value}}</span>\n      <ngx-jquery-slider [formControl]="ctrl"></ngx-jquery-slider>\n      <input [value]="ctrl.value" (change)="updateSlider($event)">\n  `\n})\nexport class AppComponent {\n  ctrl = new FormControl(11);\n\n  updateSlider($event) {\n    this.ctrl.setValue($event.currentTarget.value, {emitModelToViewChange: true});\n  }\n}\n')])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("你可以查看程序的**"),n("a",{attrs:{href:"https://plnkr.co/edit/c3tUH819er2gA9ertQS6?p=preview",target:"_blank",rel:"noopener noreferrer"}},[e._v("最终实现"),n("OutboundLink")],1),e._v("**。")]),e._v(" "),n("h3",{attrs:{id:"github"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#github"}},[e._v("#")]),e._v(" Github")]),e._v(" "),n("p",[e._v("项目的 "),n("strong",[n("a",{attrs:{href:"https://github.com/maximusk/custom-form-control-that-implements-control-value-accessor-and-wraps-jquery-slider",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github 仓库"),n("OutboundLink")],1)]),e._v("。")])])}),[],!1,null,null,null);r.default=a.exports}}]);